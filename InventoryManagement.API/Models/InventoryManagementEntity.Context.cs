//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InventoryManagement.API.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InventoryEntities : DbContext
    {
        public InventoryEntities(String connString)
                 : base(connString)
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<M_BankMaster> M_BankMaster { get; set; }
        public virtual DbSet<M_BarCodeMaster> M_BarCodeMaster { get; set; }
        public virtual DbSet<M_CatMaster> M_CatMaster { get; set; }
        public virtual DbSet<M_FiscalMaster> M_FiscalMaster { get; set; }
        public virtual DbSet<M_GroupMaster> M_GroupMaster { get; set; }
        public virtual DbSet<M_PayModeMaster> M_PayModeMaster { get; set; }
        public virtual DbSet<AddToCart> AddToCarts { get; set; }
        public virtual DbSet<BannerCategory> BannerCategories { get; set; }
        public virtual DbSet<CartItem> CartItems { get; set; }
        public virtual DbSet<ChildProductRegistration> ChildProductRegistrations { get; set; }
        public virtual DbSet<DeletedChallanDetail> DeletedChallanDetails { get; set; }
        public virtual DbSet<DeletedChallanMain> DeletedChallanMains { get; set; }
        public virtual DbSet<DeletedCustomerMaster> DeletedCustomerMasters { get; set; }
        public virtual DbSet<DeletedPartyOrderDetail> DeletedPartyOrderDetails { get; set; }
        public virtual DbSet<DeletedPartyOrderMain> DeletedPartyOrderMains { get; set; }
        public virtual DbSet<DeletedProductDispatchDetail> DeletedProductDispatchDetails { get; set; }
        public virtual DbSet<DeletedPurchaseOrderDetail> DeletedPurchaseOrderDetails { get; set; }
        public virtual DbSet<DeletedPurchaseOrderMain> DeletedPurchaseOrderMains { get; set; }
        public virtual DbSet<DeletedSalesReturnDetail> DeletedSalesReturnDetails { get; set; }
        public virtual DbSet<DeletedSalesReturnMain> DeletedSalesReturnMains { get; set; }
        public virtual DbSet<EligibleforProduct> EligibleforProducts { get; set; }
        public virtual DbSet<Im_CurrentStock> Im_CurrentStock { get; set; }
        public virtual DbSet<Inv_M_ConfigMaster> Inv_M_ConfigMaster { get; set; }
        public virtual DbSet<Inv_M_SearchTypeMaster> Inv_M_SearchTypeMaster { get; set; }
        public virtual DbSet<Inv_M_UserMaster> Inv_M_UserMaster { get; set; }
        public virtual DbSet<Inv_M_UserPermissionMaster> Inv_M_UserPermissionMaster { get; set; }
        public virtual DbSet<ItemSaveUser> ItemSaveUsers { get; set; }
        public virtual DbSet<M_BatchMaster> M_BatchMaster { get; set; }
        public virtual DbSet<M_BillTypeMaster> M_BillTypeMaster { get; set; }
        public virtual DbSet<M_BlockProductMaster> M_BlockProductMaster { get; set; }
        public virtual DbSet<M_BrandMaster> M_BrandMaster { get; set; }
        public virtual DbSet<M_CardIssue> M_CardIssue { get; set; }
        public virtual DbSet<M_CityStateMaster> M_CityStateMaster { get; set; }
        public virtual DbSet<M_ColorMaster> M_ColorMaster { get; set; }
        public virtual DbSet<M_CompanyMaster> M_CompanyMaster { get; set; }
        public virtual DbSet<M_CompBankersMaster> M_CompBankersMaster { get; set; }
        public virtual DbSet<M_CountryMaster> M_CountryMaster { get; set; }
        public virtual DbSet<M_CouponSalesDetail> M_CouponSalesDetail { get; set; }
        public virtual DbSet<M_CourierDetails> M_CourierDetails { get; set; }
        public virtual DbSet<M_CourierMaster> M_CourierMaster { get; set; }
        public virtual DbSet<M_CustomerMaster> M_CustomerMaster { get; set; }
        public virtual DbSet<M_DeleteTransaction> M_DeleteTransaction { get; set; }
        public virtual DbSet<M_DispatchMaster> M_DispatchMaster { get; set; }
        public virtual DbSet<M_DispatchTypeMaster> M_DispatchTypeMaster { get; set; }
        public virtual DbSet<M_DistrictMaster> M_DistrictMaster { get; set; }
        public virtual DbSet<M_DivisionMaster> M_DivisionMaster { get; set; }
        public virtual DbSet<M_ExtraDiscount> M_ExtraDiscount { get; set; }
        public virtual DbSet<M_FormGeneration> M_FormGeneration { get; set; }
        public virtual DbSet<M_InsuranceCompMaster> M_InsuranceCompMaster { get; set; }
        public virtual DbSet<M_InwardData> M_InwardData { get; set; }
        public virtual DbSet<M_InwardMain> M_InwardMain { get; set; }
        public virtual DbSet<M_JType> M_JType { get; set; }
        public virtual DbSet<M_KitProductMaster> M_KitProductMaster { get; set; }
        public virtual DbSet<M_KitUnitMaster> M_KitUnitMaster { get; set; }
        public virtual DbSet<M_LeaderWiseOffer> M_LeaderWiseOffer { get; set; }
        public virtual DbSet<M_LedgerMaster> M_LedgerMaster { get; set; }
        public virtual DbSet<M_LogMaster> M_LogMaster { get; set; }
        public virtual DbSet<M_MenuMaster> M_MenuMaster { get; set; }
        public virtual DbSet<M_NewsSeminarMaster> M_NewsSeminarMaster { get; set; }
        public virtual DbSet<M_OccupationMaster> M_OccupationMaster { get; set; }
        public virtual DbSet<M_OfferType> M_OfferType { get; set; }
        public virtual DbSet<M_PackageProductMaster> M_PackageProductMaster { get; set; }
        public virtual DbSet<M_PartyDiscount> M_PartyDiscount { get; set; }
        public virtual DbSet<M_PlanMaster> M_PlanMaster { get; set; }
        public virtual DbSet<M_ProductMaster> M_ProductMaster { get; set; }
        public virtual DbSet<M_QualifyTypeMaster> M_QualifyTypeMaster { get; set; }
        public virtual DbSet<M_SearchTypeMaster> M_SearchTypeMaster { get; set; }
        public virtual DbSet<M_SizeMaster> M_SizeMaster { get; set; }
        public virtual DbSet<M_SpecialOfferMaster> M_SpecialOfferMaster { get; set; }
        public virtual DbSet<M_StateDivMaster> M_StateDivMaster { get; set; }
        public virtual DbSet<M_SubCatMaster> M_SubCatMaster { get; set; }
        public virtual DbSet<M_TaxBaseMaster> M_TaxBaseMaster { get; set; }
        public virtual DbSet<M_TaxCatMaster> M_TaxCatMaster { get; set; }
        public virtual DbSet<M_TaxMaster> M_TaxMaster { get; set; }
        public virtual DbSet<M_TaxTypeMaster> M_TaxTypeMaster { get; set; }
        public virtual DbSet<M_ThemeMaster> M_ThemeMaster { get; set; }
        public virtual DbSet<M_UserGroupMaster> M_UserGroupMaster { get; set; }
        public virtual DbSet<M_UserMaster> M_UserMaster { get; set; }
        public virtual DbSet<M_UserPermissionMaster> M_UserPermissionMaster { get; set; }
        public virtual DbSet<MakeKit> MakeKits { get; set; }
        public virtual DbSet<OLDBillDetail> OLDBillDetails { get; set; }
        public virtual DbSet<OLDBillMain> OLDBillMains { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<RegisterUser> RegisterUsers { get; set; }
        public virtual DbSet<SendLoginSM> SendLoginSMS { get; set; }
        public virtual DbSet<StockOrderWishlist> StockOrderWishlists { get; set; }
        public virtual DbSet<TargetDetail> TargetDetails { get; set; }
        public virtual DbSet<TargetMaster> TargetMasters { get; set; }
        public virtual DbSet<tblAddressDetail> tblAddressDetails { get; set; }
        public virtual DbSet<tblBannerDetail> tblBannerDetails { get; set; }
        public virtual DbSet<tblBannerMaster> tblBannerMasters { get; set; }
        public virtual DbSet<tblOrderDetail> tblOrderDetails { get; set; }
        public virtual DbSet<tblOrderSummery> tblOrderSummeries { get; set; }
        public virtual DbSet<TblUserPoint> TblUserPoints { get; set; }
        public virtual DbSet<TempCourierMaster> TempCourierMasters { get; set; }
        public virtual DbSet<TempLeaderWiseOffer> TempLeaderWiseOffers { get; set; }
        public virtual DbSet<TempOrderAddress> TempOrderAddresses { get; set; }
        public virtual DbSet<TempTaxMaster> TempTaxMasters { get; set; }
        public virtual DbSet<TrnBillData> TrnBillDatas { get; set; }
        public virtual DbSet<TrnBillDetail> TrnBillDetails { get; set; }
        public virtual DbSet<TrnBillMain> TrnBillMains { get; set; }
        public virtual DbSet<TrnCancelOrder> TrnCancelOrders { get; set; }
        public virtual DbSet<TrnCancelOrderDetail> TrnCancelOrderDetails { get; set; }
        public virtual DbSet<TrnChallanDetail> TrnChallanDetails { get; set; }
        public virtual DbSet<TrnChallanMain> TrnChallanMains { get; set; }
        public virtual DbSet<TrnFormGeneration> TrnFormGenerations { get; set; }
        public virtual DbSet<TrnLedger> TrnLedgers { get; set; }
        public virtual DbSet<TrnOrderTransferDetail> TrnOrderTransferDetails { get; set; }
        public virtual DbSet<TrnPartyOrderDetail> TrnPartyOrderDetails { get; set; }
        public virtual DbSet<TrnPartyOrderMain> TrnPartyOrderMains { get; set; }
        public virtual DbSet<TrnPaymentConfirmation> TrnPaymentConfirmations { get; set; }
        public virtual DbSet<TrnPaymentHoldDetail> TrnPaymentHoldDetails { get; set; }
        public virtual DbSet<TrnPayModeDetail> TrnPayModeDetails { get; set; }
        public virtual DbSet<TrnProductDispatchDetail> TrnProductDispatchDetails { get; set; }
        public virtual DbSet<TrnProductMain> TrnProductMains { get; set; }
        public virtual DbSet<TrnPurchaseOrderDetail> TrnPurchaseOrderDetails { get; set; }
        public virtual DbSet<TrnPurchaseOrderMain> TrnPurchaseOrderMains { get; set; }
        public virtual DbSet<TrnPurchaseReturnDetail> TrnPurchaseReturnDetails { get; set; }
        public virtual DbSet<TrnPurchaseReturnMain> TrnPurchaseReturnMains { get; set; }
        public virtual DbSet<TrnReceipt> TrnReceipts { get; set; }
        public virtual DbSet<TrnReceiptDetail> TrnReceiptDetails { get; set; }
        public virtual DbSet<TrnSalesReturnDetail> TrnSalesReturnDetails { get; set; }
        public virtual DbSet<TrnSalesReturnMain> TrnSalesReturnMains { get; set; }
        public virtual DbSet<TrnSampleProduct> TrnSampleProducts { get; set; }
        public virtual DbSet<TrnStockAdjustment> TrnStockAdjustments { get; set; }
        public virtual DbSet<TrnStockJv> TrnStockJvs { get; set; }
        public virtual DbSet<TrnUpdateBillDetail> TrnUpdateBillDetails { get; set; }
        public virtual DbSet<TrnVoucher> TrnVouchers { get; set; }
        public virtual DbSet<VisionOfferProduct> VisionOfferProducts { get; set; }
        public virtual DbSet<VisionOffer> VisionOffers { get; set; }
        public virtual DbSet<WalletReq> WalletReqs { get; set; }
        public virtual DbSet<Web_M_MenuMaster> Web_M_MenuMaster { get; set; }
        public virtual DbSet<Web_M_UserPermissionMaster> Web_M_UserPermissionMaster { get; set; }
        public virtual DbSet<ABCtEMP> ABCtEMPs { get; set; }
        public virtual DbSet<BankBranch> BankBranches { get; set; }
        public virtual DbSet<D_sessnmaster> D_sessnmaster { get; set; }
        public virtual DbSet<DeletedBillDetail> DeletedBillDetails { get; set; }
        public virtual DbSet<DeletedBillMain> DeletedBillMains { get; set; }
        public virtual DbSet<DeletedCurrentStock> DeletedCurrentStocks { get; set; }
        public virtual DbSet<DeletedInwardDetail> DeletedInwardDetails { get; set; }
        public virtual DbSet<DeletedInwardMain> DeletedInwardMains { get; set; }
        public virtual DbSet<DeletedMaxDiscount> DeletedMaxDiscounts { get; set; }
        public virtual DbSet<DeletedReceipt> DeletedReceipts { get; set; }
        public virtual DbSet<DeletedStockJv> DeletedStockJvs { get; set; }
        public virtual DbSet<DeletedVoucher> DeletedVouchers { get; set; }
        public virtual DbSet<EligibleforProduct250220> EligibleforProduct250220 { get; set; }
        public virtual DbSet<EligibleforProduct29082020> EligibleforProduct29082020 { get; set; }
        public virtual DbSet<IM_CurrentStock_DelProds> IM_CurrentStock_DelProds { get; set; }
        public virtual DbSet<Inv_M_MenuMaster> Inv_M_MenuMaster { get; set; }
        public virtual DbSet<Inv_M_ThemeMaster> Inv_M_ThemeMaster { get; set; }
        public virtual DbSet<Inv_TempUserMaster> Inv_TempUserMaster { get; set; }
        public virtual DbSet<Inv_TempUserPermissionMaster> Inv_TempUserPermissionMaster { get; set; }
        public virtual DbSet<KitOffer> KitOffers { get; set; }
        public virtual DbSet<M_BillCondition> M_BillCondition { get; set; }
        public virtual DbSet<M_BloodGroupMaster> M_BloodGroupMaster { get; set; }
        public virtual DbSet<M_ChargesMaster> M_ChargesMaster { get; set; }
        public virtual DbSet<M_ConfigMaster> M_ConfigMaster { get; set; }
        public virtual DbSet<M_FlashMaster> M_FlashMaster { get; set; }
        public virtual DbSet<M_GrpPermissionMaster> M_GrpPermissionMaster { get; set; }
        public virtual DbSet<M_Initials> M_Initials { get; set; }
        public virtual DbSet<M_InvoiceTypeMaster> M_InvoiceTypeMaster { get; set; }
        public virtual DbSet<M_InwardDetail> M_InwardDetail { get; set; }
        public virtual DbSet<M_IsCardIssue> M_IsCardIssue { get; set; }
        public virtual DbSet<M_MaxDiscount> M_MaxDiscount { get; set; }
        public virtual DbSet<M_MemberMaster> M_MemberMaster { get; set; }
        public virtual DbSet<M_MonthSessnMaster> M_MonthSessnMaster { get; set; }
        public virtual DbSet<M_NewCustomer> M_NewCustomer { get; set; }
        public virtual DbSet<M_NewHOVersionInfo> M_NewHOVersionInfo { get; set; }
        public virtual DbSet<M_NewOfferMaster> M_NewOfferMaster { get; set; }
        public virtual DbSet<M_OfferProductType> M_OfferProductType { get; set; }
        public virtual DbSet<M_PartyWiseBillCondition> M_PartyWiseBillCondition { get; set; }
        public virtual DbSet<M_PKGForCustBilling> M_PKGForCustBilling { get; set; }
        public virtual DbSet<M_ProductKitUnitMaster> M_ProductKitUnitMaster { get; set; }
        public virtual DbSet<M_ProductMaster_DelProds> M_ProductMaster_DelProds { get; set; }
        public virtual DbSet<M_ProductMaster05Sep18> M_ProductMaster05Sep18 { get; set; }
        public virtual DbSet<M_ProfessionMaster> M_ProfessionMaster { get; set; }
        public virtual DbSet<M_ReportType> M_ReportType { get; set; }
        public virtual DbSet<M_Reward> M_Reward { get; set; }
        public virtual DbSet<M_RewardMaster> M_RewardMaster { get; set; }
        public virtual DbSet<M_SearchMethodMaster> M_SearchMethodMaster { get; set; }
        public virtual DbSet<M_SessnMaster> M_SessnMaster { get; set; }
        public virtual DbSet<M_SpecialProductMaster> M_SpecialProductMaster { get; set; }
        public virtual DbSet<M_StockReportType> M_StockReportType { get; set; }
        public virtual DbSet<M_SubCategory> M_SubCategory { get; set; }
        public virtual DbSet<M_SubCatMaster_> M_SubCatMaster_ { get; set; }
        public virtual DbSet<M_UserDataHistory> M_UserDataHistory { get; set; }
        public virtual DbSet<M_Wishlist> M_Wishlist { get; set; }
        public virtual DbSet<OfferAchvdMem> OfferAchvdMems { get; set; }
        public virtual DbSet<ProdVoucher> ProdVouchers { get; set; }
        public virtual DbSet<RepurchIncome> RepurchIncomes { get; set; }
        public virtual DbSet<TempBankMaster> TempBankMasters { get; set; }
        public virtual DbSet<TempBarCodeMaster> TempBarCodeMasters { get; set; }
        public virtual DbSet<TempBatchMaster> TempBatchMasters { get; set; }
        public virtual DbSet<TempBillMain> TempBillMains { get; set; }
        public virtual DbSet<TempCatMaster> TempCatMasters { get; set; }
        public virtual DbSet<TempChildProductRegistration> TempChildProductRegistrations { get; set; }
        public virtual DbSet<TempCityStateMaster> TempCityStateMasters { get; set; }
        public virtual DbSet<TempCompBankersMaster> TempCompBankersMasters { get; set; }
        public virtual DbSet<TempDispatchMaster> TempDispatchMasters { get; set; }
        public virtual DbSet<TempDistrictMaster> TempDistrictMasters { get; set; }
        public virtual DbSet<TempLedger> TempLedgers { get; set; }
        public virtual DbSet<TempLedgerMaster> TempLedgerMasters { get; set; }
        public virtual DbSet<TempNewHOVersionInfo> TempNewHOVersionInfoes { get; set; }
        public virtual DbSet<TempNewOfferMaster> TempNewOfferMasters { get; set; }
        public virtual DbSet<TempPartyWiseBillCondition> TempPartyWiseBillConditions { get; set; }
        public virtual DbSet<TempProductBookingMaster> TempProductBookingMasters { get; set; }
        public virtual DbSet<TempProductMaster> TempProductMasters { get; set; }
        public virtual DbSet<TempSalesReturnDetail> TempSalesReturnDetails { get; set; }
        public virtual DbSet<TempSalesReturnMain> TempSalesReturnMains { get; set; }
        public virtual DbSet<TempStateDivMaster> TempStateDivMasters { get; set; }
        public virtual DbSet<TempSubCatMaster> TempSubCatMasters { get; set; }
        public virtual DbSet<TempTaxCatMaster> TempTaxCatMasters { get; set; }
        public virtual DbSet<TempVoucher> TempVouchers { get; set; }
        public virtual DbSet<TmpBillDate> TmpBillDates { get; set; }
        public virtual DbSet<TransMaster> TransMasters { get; set; }
        public virtual DbSet<TrnBillDetails05Sep18> TrnBillDetails05Sep18 { get; set; }
        public virtual DbSet<TrnBillMain11Sep18> TrnBillMain11Sep18 { get; set; }
        public virtual DbSet<TrnOrderDeliveryDetail> TrnOrderDeliveryDetails { get; set; }
        public virtual DbSet<TrnPayModeMaster> TrnPayModeMasters { get; set; }
        public virtual DbSet<TrnPickListDetail> TrnPickListDetails { get; set; }
        public virtual DbSet<TrnPurchaseReqDetail> TrnPurchaseReqDetails { get; set; }
        public virtual DbSet<TrnPurchaseReqMain> TrnPurchaseReqMains { get; set; }
        public virtual DbSet<VisionOfferProducts_26Aug> VisionOfferProducts_26Aug { get; set; }
        public virtual DbSet<VisionOfferProducts13Sep19> VisionOfferProducts13Sep19 { get; set; }
        public virtual DbSet<VisionOfferProductsPrev> VisionOfferProductsPrevs { get; set; }
        public virtual DbSet<VisionOfferProductstobe> VisionOfferProductstobes { get; set; }
        public virtual DbSet<visionOffers__> visionOffers__ { get; set; }
        public virtual DbSet<VisionOffers_26Aug> VisionOffers_26Aug { get; set; }
        public virtual DbSet<VisionOffers08Sep18> VisionOffers08Sep18 { get; set; }
        public virtual DbSet<VisionOffers13Sep19> VisionOffers13Sep19 { get; set; }
        public virtual DbSet<VisionOffers270819> VisionOffers270819 { get; set; }
        public virtual DbSet<VisionOffersPrev> VisionOffersPrevs { get; set; }
        public virtual DbSet<VisionOfferstobe> VisionOfferstobes { get; set; }
        public virtual DbSet<Vouchertype> Vouchertypes { get; set; }
        public virtual DbSet<V_AccountStatement> V_AccountStatement { get; set; }
        public virtual DbSet<V_AvailProdStockBarcodes> V_AvailProdStockBarcodes { get; set; }
        public virtual DbSet<V_BillOfferIDs> V_BillOfferIDs { get; set; }
        public virtual DbSet<V_BillOffers> V_BillOffers { get; set; }
        public virtual DbSet<V_BillWiseSaleSummary> V_BillWiseSaleSummary { get; set; }
        public virtual DbSet<V_City> V_City { get; set; }
        public virtual DbSet<V_CurrentStockDetail> V_CurrentStockDetail { get; set; }
        public virtual DbSet<V_CurrentStockDetail_STK> V_CurrentStockDetail_STK { get; set; }
        public virtual DbSet<V_CurrentStockDetailNotForStockist> V_CurrentStockDetailNotForStockist { get; set; }
        public virtual DbSet<V_DeletedSaleSummary> V_DeletedSaleSummary { get; set; }
        public virtual DbSet<V_District> V_District { get; set; }
        public virtual DbSet<V_GroupWiseSaleSummary> V_GroupWiseSaleSummary { get; set; }
        public virtual DbSet<V_IDWiseBillSummary> V_IDWiseBillSummary { get; set; }
        public virtual DbSet<V_LedgerBalance> V_LedgerBalance { get; set; }
        public virtual DbSet<V_MonthWisePartyPurchaseSummary> V_MonthWisePartyPurchaseSummary { get; set; }
        public virtual DbSet<V_MonthWiseSaleSummary> V_MonthWiseSaleSummary { get; set; }
        public virtual DbSet<V_MonthWiseSupplierPurchaseSummary> V_MonthWiseSupplierPurchaseSummary { get; set; }
        public virtual DbSet<V_OfferProductDetail> V_OfferProductDetail { get; set; }
        public virtual DbSet<V_PartyBalance> V_PartyBalance { get; set; }
        public virtual DbSet<V_PartyDetail> V_PartyDetail { get; set; }
        public virtual DbSet<V_PartyWiseBalance> V_PartyWiseBalance { get; set; }
        public virtual DbSet<V_PaymentModeWiseDetail> V_PaymentModeWiseDetail { get; set; }
        public virtual DbSet<V_ProductStockPosition> V_ProductStockPosition { get; set; }
        public virtual DbSet<V_ProductStockPosition_STK> V_ProductStockPosition_STK { get; set; }
        public virtual DbSet<V_ProductWiseSale> V_ProductWiseSale { get; set; }
        public virtual DbSet<V_SaleReturnDetail> V_SaleReturnDetail { get; set; }
        public virtual DbSet<V_specialProdductDP> V_specialProdductDP { get; set; }
        public virtual DbSet<V_StockPlanning> V_StockPlanning { get; set; }
        public virtual DbSet<V_StockPlanningForSTKST> V_StockPlanningForSTKST { get; set; }
        public virtual DbSet<V_StockRecvSummary> V_StockRecvSummary { get; set; }
        public virtual DbSet<V_TopSellingProducts> V_TopSellingProducts { get; set; }
        public virtual DbSet<V_TransportDetail> V_TransportDetail { get; set; }
        public virtual DbSet<V_User> V_User { get; set; }
        public virtual DbSet<V_WebBillDetail> V_WebBillDetail { get; set; }
    
        [DbFunction("InventoryEntities", "MonthWiseSummary")]
        public virtual IQueryable<MonthWiseSummary_Result> MonthWiseSummary(string partyCode, string rptType, string prodType)
        {
            var partyCodeParameter = partyCode != null ?
                new ObjectParameter("PartyCode", partyCode) :
                new ObjectParameter("PartyCode", typeof(string));
    
            var rptTypeParameter = rptType != null ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(string));
    
            var prodTypeParameter = prodType != null ?
                new ObjectParameter("ProdType", prodType) :
                new ObjectParameter("ProdType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<MonthWiseSummary_Result>("[InventoryEntities].[MonthWiseSummary](@PartyCode, @RptType, @ProdType)", partyCodeParameter, rptTypeParameter, prodTypeParameter);
        }
    
        [DbFunction("InventoryEntities", "OfferResult")]
        public virtual IQueryable<OfferResult_Result1> OfferResult(Nullable<int> sessID, Nullable<int> offerUID)
        {
            var sessIDParameter = sessID.HasValue ?
                new ObjectParameter("SessID", sessID) :
                new ObjectParameter("SessID", typeof(int));
    
            var offerUIDParameter = offerUID.HasValue ?
                new ObjectParameter("OfferUID", offerUID) :
                new ObjectParameter("OfferUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<OfferResult_Result1>("[InventoryEntities].[OfferResult](@SessID, @OfferUID)", sessIDParameter, offerUIDParameter);
        }
    
        public virtual ObjectResult<StockDetail_Result1> StockDetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StockDetail_Result1>("StockDetail", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<WRDashboardSummary_Result> WRDashboardSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WRDashboardSummary_Result>("WRDashboardSummary");
        }
    
        public virtual ObjectResult<FrDashboardSummary_Result> FrDashboardSummary(string partyCode)
        {
            var partyCodeParameter = partyCode != null ?
                new ObjectParameter("PartyCode", partyCode) :
                new ObjectParameter("PartyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FrDashboardSummary_Result>("FrDashboardSummary", partyCodeParameter);
        }
    
        public virtual ObjectResult<FranchiseOfferDetail_Result2> FranchiseOfferDetail(string partyCode)
        {
            var partyCodeParameter = partyCode != null ?
                new ObjectParameter("PartyCode", partyCode) :
                new ObjectParameter("PartyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FranchiseOfferDetail_Result2>("FranchiseOfferDetail", partyCodeParameter);
        }
    
        [DbFunction("InventoryEntities", "WalletReport")]
        public virtual IQueryable<WalletReport_Result1> WalletReport(string partyCode)
        {
            var partyCodeParameter = partyCode != null ?
                new ObjectParameter("PartyCode", partyCode) :
                new ObjectParameter("PartyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<WalletReport_Result1>("[InventoryEntities].[WalletReport](@PartyCode)", partyCodeParameter);
        }
    
        [DbFunction("InventoryEntities", "ProductSummary")]
        public virtual IQueryable<ProductSummary_Result> ProductSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ProductSummary_Result>("[InventoryEntities].[ProductSummary](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        public virtual int ActivationBill(string iDNo)
        {
            var iDNoParameter = iDNo != null ?
                new ObjectParameter("IDNo", iDNo) :
                new ObjectParameter("IDNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActivationBill", iDNoParameter);
        }
    
        [DbFunction("InventoryEntities", "DailyStockDetail")]
        public virtual IQueryable<DailyStockDetail_Result> DailyStockDetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string prodID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var prodIDParameter = prodID != null ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<DailyStockDetail_Result>("[InventoryEntities].[DailyStockDetail](@FromDate, @ToDate, @ProdID)", fromDateParameter, toDateParameter, prodIDParameter);
        }
    
        public virtual int DELETEPARTYORDER(string orderNo, string dReason, Nullable<decimal> dUserId, string dStatus, string prodId, Nullable<int> dFSessId)
        {
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(string));
    
            var dReasonParameter = dReason != null ?
                new ObjectParameter("DReason", dReason) :
                new ObjectParameter("DReason", typeof(string));
    
            var dUserIdParameter = dUserId.HasValue ?
                new ObjectParameter("DUserId", dUserId) :
                new ObjectParameter("DUserId", typeof(decimal));
    
            var dStatusParameter = dStatus != null ?
                new ObjectParameter("DStatus", dStatus) :
                new ObjectParameter("DStatus", typeof(string));
    
            var prodIdParameter = prodId != null ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(string));
    
            var dFSessIdParameter = dFSessId.HasValue ?
                new ObjectParameter("DFSessId", dFSessId) :
                new ObjectParameter("DFSessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETEPARTYORDER", orderNoParameter, dReasonParameter, dUserIdParameter, dStatusParameter, prodIdParameter, dFSessIdParameter);
        }
    
        public virtual int DispatchOrder(Nullable<decimal> orderNo, string soldBy, Nullable<decimal> courierID, string courierName, string docketNo, string delvPlace)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(decimal));
    
            var soldByParameter = soldBy != null ?
                new ObjectParameter("SoldBy", soldBy) :
                new ObjectParameter("SoldBy", typeof(string));
    
            var courierIDParameter = courierID.HasValue ?
                new ObjectParameter("CourierID", courierID) :
                new ObjectParameter("CourierID", typeof(decimal));
    
            var courierNameParameter = courierName != null ?
                new ObjectParameter("CourierName", courierName) :
                new ObjectParameter("CourierName", typeof(string));
    
            var docketNoParameter = docketNo != null ?
                new ObjectParameter("DocketNo", docketNo) :
                new ObjectParameter("DocketNo", typeof(string));
    
            var delvPlaceParameter = delvPlace != null ?
                new ObjectParameter("DelvPlace", delvPlace) :
                new ObjectParameter("DelvPlace", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DispatchOrder", orderNoParameter, soldByParameter, courierIDParameter, courierNameParameter, docketNoParameter, delvPlaceParameter);
        }
    
        public virtual int GetFreeProducts(Nullable<int> offerID)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFreeProducts", offerIDParameter);
        }
    
        public virtual ObjectResult<string> GetOfferCondition(Nullable<int> formNo)
        {
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetOfferCondition", formNoParameter);
        }
    
        public virtual int InsertProduct(Nullable<decimal> kitID)
        {
            var kitIDParameter = kitID.HasValue ?
                new ObjectParameter("KitID", kitID) :
                new ObjectParameter("KitID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProduct", kitIDParameter);
        }
    
        public virtual int Inv_SRWallet(string returnNo)
        {
            var returnNoParameter = returnNo != null ?
                new ObjectParameter("ReturnNo", returnNo) :
                new ObjectParameter("ReturnNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Inv_SRWallet", returnNoParameter);
        }
    
        public virtual int MonthlySummary(string partyCode, string rptType, string prodType, string mnth, Nullable<int> mm, Nullable<int> yyyy)
        {
            var partyCodeParameter = partyCode != null ?
                new ObjectParameter("PartyCode", partyCode) :
                new ObjectParameter("PartyCode", typeof(string));
    
            var rptTypeParameter = rptType != null ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(string));
    
            var prodTypeParameter = prodType != null ?
                new ObjectParameter("ProdType", prodType) :
                new ObjectParameter("ProdType", typeof(string));
    
            var mnthParameter = mnth != null ?
                new ObjectParameter("mnth", mnth) :
                new ObjectParameter("mnth", typeof(string));
    
            var mmParameter = mm.HasValue ?
                new ObjectParameter("mm", mm) :
                new ObjectParameter("mm", typeof(int));
    
            var yyyyParameter = yyyy.HasValue ?
                new ObjectParameter("yyyy", yyyy) :
                new ObjectParameter("yyyy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MonthlySummary", partyCodeParameter, rptTypeParameter, prodTypeParameter, mnthParameter, mmParameter, yyyyParameter);
        }
    
        public virtual int OrderKitProducts(string orderNo)
        {
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrderKitProducts", orderNoParameter);
        }
    
        public virtual int Proc_Inv_Repurch(string billNo)
        {
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_Inv_Repurch", billNoParameter);
        }
    
        public virtual int REJECTORDER(Nullable<decimal> orderNo, Nullable<decimal> formno, string dReason, Nullable<decimal> dUserId, string deleteOrder)
        {
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(decimal));
    
            var formnoParameter = formno.HasValue ?
                new ObjectParameter("Formno", formno) :
                new ObjectParameter("Formno", typeof(decimal));
    
            var dReasonParameter = dReason != null ?
                new ObjectParameter("DReason", dReason) :
                new ObjectParameter("DReason", typeof(string));
    
            var dUserIdParameter = dUserId.HasValue ?
                new ObjectParameter("DUserId", dUserId) :
                new ObjectParameter("DUserId", typeof(decimal));
    
            var deleteOrderParameter = deleteOrder != null ?
                new ObjectParameter("DeleteOrder", deleteOrder) :
                new ObjectParameter("DeleteOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REJECTORDER", orderNoParameter, formnoParameter, dReasonParameter, dUserIdParameter, deleteOrderParameter);
        }
    
        public virtual int ROLLBACK_PI(string billNo, string dReason, Nullable<decimal> dUserId, Nullable<int> dFSessId)
        {
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            var dReasonParameter = dReason != null ?
                new ObjectParameter("DReason", dReason) :
                new ObjectParameter("DReason", typeof(string));
    
            var dUserIdParameter = dUserId.HasValue ?
                new ObjectParameter("DUserId", dUserId) :
                new ObjectParameter("DUserId", typeof(decimal));
    
            var dFSessIdParameter = dFSessId.HasValue ?
                new ObjectParameter("DFSessId", dFSessId) :
                new ObjectParameter("DFSessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ROLLBACK_PI", billNoParameter, dReasonParameter, dUserIdParameter, dFSessIdParameter);
        }
    
        public virtual int ROLLBACKBILL(string billNo, string dReason, Nullable<decimal> dUserId, Nullable<int> dFSessId)
        {
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            var dReasonParameter = dReason != null ?
                new ObjectParameter("DReason", dReason) :
                new ObjectParameter("DReason", typeof(string));
    
            var dUserIdParameter = dUserId.HasValue ?
                new ObjectParameter("DUserId", dUserId) :
                new ObjectParameter("DUserId", typeof(decimal));
    
            var dFSessIdParameter = dFSessId.HasValue ?
                new ObjectParameter("DFSessId", dFSessId) :
                new ObjectParameter("DFSessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ROLLBACKBILL", billNoParameter, dReasonParameter, dUserIdParameter, dFSessIdParameter);
        }
    
        public virtual int ROLLBACKCHALLAN(string billNo, string dReason, Nullable<decimal> dUserId, Nullable<int> dFSessId)
        {
            var billNoParameter = billNo != null ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(string));
    
            var dReasonParameter = dReason != null ?
                new ObjectParameter("DReason", dReason) :
                new ObjectParameter("DReason", typeof(string));
    
            var dUserIdParameter = dUserId.HasValue ?
                new ObjectParameter("DUserId", dUserId) :
                new ObjectParameter("DUserId", typeof(decimal));
    
            var dFSessIdParameter = dFSessId.HasValue ?
                new ObjectParameter("DFSessId", dFSessId) :
                new ObjectParameter("DFSessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ROLLBACKCHALLAN", billNoParameter, dReasonParameter, dUserIdParameter, dFSessIdParameter);
        }
    
        public virtual int ROLLBACKSALERETURN(string sReturnNo, string dReason, Nullable<decimal> dUserId, Nullable<int> dFSessId)
        {
            var sReturnNoParameter = sReturnNo != null ?
                new ObjectParameter("SReturnNo", sReturnNo) :
                new ObjectParameter("SReturnNo", typeof(string));
    
            var dReasonParameter = dReason != null ?
                new ObjectParameter("DReason", dReason) :
                new ObjectParameter("DReason", typeof(string));
    
            var dUserIdParameter = dUserId.HasValue ?
                new ObjectParameter("DUserId", dUserId) :
                new ObjectParameter("DUserId", typeof(decimal));
    
            var dFSessIdParameter = dFSessId.HasValue ?
                new ObjectParameter("DFSessId", dFSessId) :
                new ObjectParameter("DFSessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ROLLBACKSALERETURN", sReturnNoParameter, dReasonParameter, dUserIdParameter, dFSessIdParameter);
        }
    
        [DbFunction("InventoryEntities", "Sample")]
        public virtual IQueryable<Sample_Result> Sample(Nullable<int> sampleValue)
        {
            var sampleValueParameter = sampleValue.HasValue ?
                new ObjectParameter("SampleValue", sampleValue) :
                new ObjectParameter("SampleValue", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Sample_Result>("[InventoryEntities].[Sample](@SampleValue)", sampleValueParameter);
        }
    
        public virtual int sp_ChangeBillDate(Nullable<System.DateTime> newBillDate, string userBillNo, Nullable<int> userID)
        {
            var newBillDateParameter = newBillDate.HasValue ?
                new ObjectParameter("NewBillDate", newBillDate) :
                new ObjectParameter("NewBillDate", typeof(System.DateTime));
    
            var userBillNoParameter = userBillNo != null ?
                new ObjectParameter("UserBillNo", userBillNo) :
                new ObjectParameter("UserBillNo", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChangeBillDate", newBillDateParameter, userBillNoParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_GetFirstBillCommission_Result> sp_GetFirstBillCommission(Nullable<int> month, Nullable<int> year, string code)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFirstBillCommission_Result>("sp_GetFirstBillCommission", monthParameter, yearParameter, codeParameter);
        }
    
        public virtual int StockSummary(Nullable<System.DateTime> stockDate)
        {
            var stockDateParameter = stockDate.HasValue ?
                new ObjectParameter("StockDate", stockDate) :
                new ObjectParameter("StockDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StockSummary", stockDateParameter);
        }
    
        public virtual ObjectResult<Category_Result> Category(string action, Nullable<decimal> catId)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("CatId", catId) :
                new ObjectParameter("CatId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Category_Result>("Category", actionParameter, catIdParameter);
        }
    
        public virtual int SaveOrderDetail(string action, Nullable<int> userId, Nullable<int> orderNo, string unqiueId, string iPAddress, string idNo, string formNo, string walletType, string refNo, Nullable<decimal> amount, Nullable<decimal> bv)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var unqiueIdParameter = unqiueId != null ?
                new ObjectParameter("UnqiueId", unqiueId) :
                new ObjectParameter("UnqiueId", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var idNoParameter = idNo != null ?
                new ObjectParameter("IdNo", idNo) :
                new ObjectParameter("IdNo", typeof(string));
    
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var walletTypeParameter = walletType != null ?
                new ObjectParameter("WalletType", walletType) :
                new ObjectParameter("WalletType", typeof(string));
    
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var bvParameter = bv.HasValue ?
                new ObjectParameter("bv", bv) :
                new ObjectParameter("bv", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveOrderDetail", actionParameter, userIdParameter, orderNoParameter, unqiueIdParameter, iPAddressParameter, idNoParameter, formNoParameter, walletTypeParameter, refNoParameter, amountParameter, bvParameter);
        }
    
        public virtual ObjectResult<SearchProduct_Result> SearchProduct(string action, string prodName)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var prodNameParameter = prodName != null ?
                new ObjectParameter("prodName", prodName) :
                new ObjectParameter("prodName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchProduct_Result>("SearchProduct", actionParameter, prodNameParameter);
        }
    
        public virtual ObjectResult<ShowBanner_Result> ShowBanner(string action, Nullable<int> bannerCatId)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var bannerCatIdParameter = bannerCatId.HasValue ?
                new ObjectParameter("BannerCatId", bannerCatId) :
                new ObjectParameter("BannerCatId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowBanner_Result>("ShowBanner", actionParameter, bannerCatIdParameter);
        }
    
        public virtual int ShowProduct(string action, Nullable<int> id, string prodId, string productname, string imgpath, Nullable<decimal> price, string iPAddress, Nullable<decimal> qty, Nullable<int> userId, string unqiueId, Nullable<decimal> bv)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var prodIdParameter = prodId != null ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(string));
    
            var productnameParameter = productname != null ?
                new ObjectParameter("productname", productname) :
                new ObjectParameter("productname", typeof(string));
    
            var imgpathParameter = imgpath != null ?
                new ObjectParameter("Imgpath", imgpath) :
                new ObjectParameter("Imgpath", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("qty", qty) :
                new ObjectParameter("qty", typeof(decimal));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var unqiueIdParameter = unqiueId != null ?
                new ObjectParameter("UnqiueId", unqiueId) :
                new ObjectParameter("UnqiueId", typeof(string));
    
            var bvParameter = bv.HasValue ?
                new ObjectParameter("bv", bv) :
                new ObjectParameter("bv", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ShowProduct", actionParameter, idParameter, prodIdParameter, productnameParameter, imgpathParameter, priceParameter, iPAddressParameter, qtyParameter, userIdParameter, unqiueIdParameter, bvParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_BannerMaster(string action, Nullable<int> bannerCatId, Nullable<int> bannerId, Nullable<int> bannerDetailId, string bannerName, string imagePath, string companyName)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var bannerCatIdParameter = bannerCatId.HasValue ?
                new ObjectParameter("BannerCatId", bannerCatId) :
                new ObjectParameter("BannerCatId", typeof(int));
    
            var bannerIdParameter = bannerId.HasValue ?
                new ObjectParameter("BannerId", bannerId) :
                new ObjectParameter("BannerId", typeof(int));
    
            var bannerDetailIdParameter = bannerDetailId.HasValue ?
                new ObjectParameter("BannerDetailId", bannerDetailId) :
                new ObjectParameter("BannerDetailId", typeof(int));
    
            var bannerNameParameter = bannerName != null ?
                new ObjectParameter("BannerName", bannerName) :
                new ObjectParameter("BannerName", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_BannerMaster", actionParameter, bannerCatIdParameter, bannerIdParameter, bannerDetailIdParameter, bannerNameParameter, imagePathParameter, companyNameParameter);
        }
    
        public virtual ObjectResult<UserDetails_Result> UserDetails(string action, string firstName, string lastName, string e_Mail, string password)
        {
            var actionParameter = action != null ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var e_MailParameter = e_Mail != null ?
                new ObjectParameter("E_Mail", e_Mail) :
                new ObjectParameter("E_Mail", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserDetails_Result>("UserDetails", actionParameter, firstNameParameter, lastNameParameter, e_MailParameter, passwordParameter);
        }
    
        public virtual int ActivationBill1(string iDNo)
        {
            var iDNoParameter = iDNo != null ?
                new ObjectParameter("IDNo", iDNo) :
                new ObjectParameter("IDNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActivationBill1", iDNoParameter);
        }
    
        public virtual int GetFreeProducts1(Nullable<int> offerID)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("OfferID", offerID) :
                new ObjectParameter("OfferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFreeProducts1", offerIDParameter);
        }
    
        public virtual int GetOfferCondition1(Nullable<int> formNo)
        {
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetOfferCondition1", formNoParameter);
        }
    
        public virtual int Inv_SRWallet1(string returnNo)
        {
            var returnNoParameter = returnNo != null ?
                new ObjectParameter("ReturnNo", returnNo) :
                new ObjectParameter("ReturnNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Inv_SRWallet1", returnNoParameter);
        }
    
        public virtual int sp_GetBillImport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetBillImport", fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_GetFirstBillCommission1(Nullable<int> month, Nullable<int> year, string code)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetFirstBillCommission1", monthParameter, yearParameter, codeParameter);
        }
    
        public virtual int sp_UpdateFreeProduct(Nullable<int> formno, Nullable<System.DateTime> upgradeDate)
        {
            var formnoParameter = formno.HasValue ?
                new ObjectParameter("Formno", formno) :
                new ObjectParameter("Formno", typeof(int));
    
            var upgradeDateParameter = upgradeDate.HasValue ?
                new ObjectParameter("UpgradeDate", upgradeDate) :
                new ObjectParameter("UpgradeDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateFreeProduct", formnoParameter, upgradeDateParameter);
        }
    
        public virtual int StockSummary1(Nullable<System.DateTime> stockDate)
        {
            var stockDateParameter = stockDate.HasValue ?
                new ObjectParameter("StockDate", stockDate) :
                new ObjectParameter("StockDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StockSummary1", stockDateParameter);
        }
    
        public virtual ObjectResult<sp_Login_Result> sp_Login(string action, string userName, string password, string firstName, string lastName, string mobileNo, string formNo, string activeStatus, string fax, string address, string city, Nullable<int> cityCode, string district, Nullable<int> districtCode, Nullable<int> stateCode, Nullable<int> pinCode, Nullable<int> countryId, string randomId, string countryName, Nullable<int> iDNO, Nullable<int> prodId, Nullable<int> id, Nullable<decimal> userPoints)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var activeStatusParameter = activeStatus != null ?
                new ObjectParameter("ActiveStatus", activeStatus) :
                new ObjectParameter("ActiveStatus", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var cityCodeParameter = cityCode.HasValue ?
                new ObjectParameter("CityCode", cityCode) :
                new ObjectParameter("CityCode", typeof(int));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var districtCodeParameter = districtCode.HasValue ?
                new ObjectParameter("DistrictCode", districtCode) :
                new ObjectParameter("DistrictCode", typeof(int));
    
            var stateCodeParameter = stateCode.HasValue ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(int));
    
            var pinCodeParameter = pinCode.HasValue ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var randomIdParameter = randomId != null ?
                new ObjectParameter("randomId", randomId) :
                new ObjectParameter("randomId", typeof(string));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var iDNOParameter = iDNO.HasValue ?
                new ObjectParameter("IDNO", iDNO) :
                new ObjectParameter("IDNO", typeof(int));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var userPointsParameter = userPoints.HasValue ?
                new ObjectParameter("UserPoints", userPoints) :
                new ObjectParameter("UserPoints", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Login_Result>("sp_Login", actionParameter, userNameParameter, passwordParameter, firstNameParameter, lastNameParameter, mobileNoParameter, formNoParameter, activeStatusParameter, faxParameter, addressParameter, cityParameter, cityCodeParameter, districtParameter, districtCodeParameter, stateCodeParameter, pinCodeParameter, countryIdParameter, randomIdParameter, countryNameParameter, iDNOParameter, prodIdParameter, idParameter, userPointsParameter);
        }
    
        public virtual ObjectResult<Sp_GetBalence_Result> Sp_GetBalence(string action, string walletType, string formNo)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var walletTypeParameter = walletType != null ?
                new ObjectParameter("walletType", walletType) :
                new ObjectParameter("walletType", typeof(string));
    
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetBalence_Result>("Sp_GetBalence", actionParameter, walletTypeParameter, formNoParameter);
        }
    
        [DbFunction("InventoryEntities", "ufnGetBalance")]
        public virtual IQueryable<ufnGetBalance_Result> ufnGetBalance(string formNo, string acType)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var acTypeParameter = acType != null ?
                new ObjectParameter("AcType", acType) :
                new ObjectParameter("AcType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufnGetBalance_Result>("[InventoryEntities].[ufnGetBalance](@FormNo, @AcType)", formNoParameter, acTypeParameter);
        }
    
        public virtual ObjectResult<Sp_GetBalanceDashBord_New_Result> Sp_GetBalanceDashBord_New(Nullable<int> formno)
        {
            var formnoParameter = formno.HasValue ?
                new ObjectParameter("Formno", formno) :
                new ObjectParameter("Formno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetBalanceDashBord_New_Result>("Sp_GetBalanceDashBord_New", formnoParameter);
        }
    }
}
