@model InventoryManagement.Entity.Common.SubCategoryDetails
@{
    ViewBag.Title = "SubCategoryMaster";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style type="text/css">
     .gj-grid-wrapper {
    min-width:100%!important;
    overflow-x:scroll!important;
    }
</style>
<script type="text/javascript">
    var ErrorFlag = true;
    $(document).ready(function () {
        $(".preloader").hide();
        
        $('input:radio[name="IsActive"]').on('ifChanged', function (event) {
            console.log("value", $(this).val());
            if ($(this).is(':checked') && $(this).val() == "True") {
                console.log("in if");
                $("#hiddenIsActive").val(true);
            }
            else {
                console.log("in else");
                $("#hiddenIsActive").val(false);
            }
            
        });
        @*$("form[name=subcategoryForm]").unbind("submit");
        $("form[name=subcategoryForm]").bind('submit', function (e) {
            e.preventDefault();
            e.stopPropagation();
            var formdata = new FormData($(this)[0]);
                                        console.log("form data = > " + formdata);
                                        $.ajax({
                                            url: '@Url.Action("SaveSubCategoryMaster", "Product")',
                                            type: 'POST',
                                            data: formdata,
                                            processData: false,
                                            contentType: false,
                                            dataType: "json",
                                            success: function (objResponse) {
                                                if (objResponse != null) {
                                                    if (objResponse.ResponseStatus == "OK") {
                                                        OpenDialog("dialogMessage", objResponse.ResponseMessage, "false");
                                                        reset();
                                                    }
                                                }
                                            },
                                            error: function (xhr, data) {
                                                //  return false;
                                                console.log(xhr);
                                                console.log("Error:", data);
                                            }
                                        });
        });*@

        var grid;
        var SubCategoryGrid = [{}];
        fillGrid();
        function fillGrid() {
            //  $(".preloader").show();
            var link = '@Url.Action("GetFullSubCategoryList", "Product")';
            SubCategoryGrid = [{}];

            var CanEdit = true;
            var UserAccess = '@ViewBag.UserCanAccess';

            if (UserAccess == 'Edit') {
                CanEdit = false;
            }

            $.ajax({
                type: 'POST',
                url: link,
                success: function (resultData) {
                    $(".preloader").hide();
                    if (SubCategoryGrid[0].SubCategoryId == undefined)
                        SubCategoryGrid = SubCategoryGrid.splice(1);
                    $("#noRecord").hide();
                    console.log("SubCategoryGrid", SubCategoryGrid);
                    if (grid != null) {
                        grid.destroy();
                        $('#grid').empty();

                    }

                    if (resultData != null) {
                        var i = 0;
                        for (i = 0; i < resultData.length; i++) {
                            var path = resultData[i].CategoryName + " >> " + resultData[i].subCategoryName;
                            SubCategoryGrid.push({"SNo":(i+1), "CategoryId": resultData[i].CategoryId, "SubCategoryId": resultData[i].SubCatId, "CategoryName": resultData[i].CategoryName, "SubCategory": resultData[i].subCategoryName, "Description": resultData[i].Description, "Path": path, "Status": (resultData[i].IsActive) ? "Active" : "Inactive" });
                        }
                        // CategoryGrid = CategoryGrid.splice(1);
                        $("#noRecord").hide();
                        grid = $('#grid').grid({
                            dataSource: SubCategoryGrid,
                            uiLibrary: 'bootstrap',
                            headerFilter: true,
                            columns: [
                                { field: 'SNo', title: 'S.No.', sortable: true, width: 50, hidden: false, cssClass: "noExl", filterable: false },
                                 { field: 'SubCategoryId', title: 'Id', sortable: true, width: 50, hidden: false, cssClass: "noExl", filterable: false },
                                 { field: 'CategoryId', title: 'CategoryId', sortable: true, width: 150, hidden: true, cssClass: "noExl", filterable: false },
                                { field: 'CategoryName', title: 'Category', sortable: true, width: 150, filterable: true },
                                { field: 'SubCategory', title: 'SubCategory', sortable: true, width: 150, filterable: true },
                                 { field: 'Description', title: 'Description', sortable: true, width: 400, filterable: true },
                                  { field: 'Path', title: 'Path', sortable: true, width: 120, filterable: true },
                                { field: 'Status', title: 'Status', sortable: true, width: 100, filterable: true },
                    //{ title: '', field: 'Edit', width: 34, type: 'icon', icon: 'glyphicon-pencil', tooltip: 'Edit', events: { 'click': Edit }, filterable: false },
                   { title: '', field: 'Delete', width: 30, hidden : CanEdit,htype: 'icon', icon: 'glyphicon-remove', tooltip: 'Delete', events: { 'click': Delete }, filterable: false }
                            ],
                            pager: { limit: 20, sizes: [15, 20, 35, 50, 65, 80, 95, 100] }
                        });
                        grid.on('rowSelect', function (e, $row, id, record) {
                            //alert('Row with id=' + id + ' is selected.');
                            console.log("$row", $row);
                            console.log("record", record);
                            FillGridValuesInTextBox(record)

                        });
                    }
                    else {
                        $("#noRecord").show();
                    }
                    //$(".preloader").hide();
                    //$('html').getNiceScroll().resize();
                    //$('#sidebar').getNiceScroll().resize();
                    //$('.scroll-panel').getNiceScroll().resize();
                }
            });
        }


        $("#AddButton").click(function () {
            $("#AddButton").attr("disabled",true);
            var isAddVal = $("#isAdd").val();
            if (isAddVal == "") {
                $("#isAdd").val("Add");
                $("#SubCategoryId").val(0);
            }

            Save();
        });

        function callAddEditDelete() {
            var SubCategoryName = $("#subCategoryName").val();
            console.log("SubCategoryName", SubCategoryName);
            if ((SubCategoryName != null && SubCategoryName != "") || ($("#isAdd").val() == "Delete")) {
             var f =false;
                if(($("#isAdd").val()!="Delete")){
                    f=checkDuplicate();
                }
                else {
                f=true;
                }
               
                if (f) {
                    var formdata = new FormData($("#subcategoryForm")[0]);
                    //var status = $("input[name=ActiveStatus]:checked").val();
                    //console.log("status:", status);
                    $.ajax({
                        url: '@Url.Action("SaveSubCategoryMaster", "Product")',
                        type: 'POST',
                        data: formdata,
                        processData: false,
                        contentType: false,
                        dataType: "json",
                        success: function (objResponse) {
                            $(".preloader").hide();
                            $("#AddButton").removeAttr("disabled");
                            if (objResponse != null) {
                                if (objResponse.ResponseStatus == "OK") {
                                    reset();
                                    fillGrid();
                                    OpenDialog("dialogMessage", objResponse.ResponseMessage, "false");


                                }
                            }
                        },
                        error: function (xhr, data) {
                            //  return false;
                            console.log(xhr);
                            console.log("Error:", data);
                        }
                    });
                }
            }
            else {
                $("#AddButton").removeAttr("disabled");
                OpenDialog("dialogMessage", "Enter Sub Category Name", "false");
            }

        }

        function Delete(e) {

            $("#isAdd").val("Delete");
            if (confirm('Are you sure?')) {
                console.log(e);

                $("#SubCategoryId").val(e.data.record.SubCategoryId);
                if (e.data.record.ActiveStatus == "Active") {
                    $("#StatusActive").prop('checked', true);
                    $("#StatusInActive").prop('checked', false);
                    $("#hiddenIsActive").val(true);
                }
                else {
                    $("#StatusInActive").prop("checked", true);
                    $("#StatusActive").prop('checked', false);
                   $("#hiddenIsActive").val(false);
                }

                Save();
                //load the new data from the server after the deletion
            }
        }


        function Save() {
            $(".preloader").show();
            //alert('handled');


            var isAdd = $("#isAdd").val();
            console.log("isAdd", isAdd);
            callAddEditDelete();

            //$(".preloader").hide();
            //$('html').getNiceScroll().resize();
            //$('#sidebar').getNiceScroll().resize();
            //$('.scroll-panel').getNiceScroll().resize();

        }


        function FillGridValuesInTextBox(record) {
            $("#isAdd").val("Edit");
            $("#categoryId").val(record.CategoryId);
            $("#hiddenCategoryId").val(record.CategoryId);
            $("#subCategoryName").val(record.SubCategory);
            $("#Description").val(record.Description);
            //$('input[name=IsActive]').attr('checked', false);
            console.log(record.Status);
            if (record.Status == "Active") {
                var ele = $("#StatusActive").closest('div');
                console.log("ele", ele);
                var rEle = $("#StatusInActive").closest('div');
                $(ele).addClass("checked");
                $(rEle).removeClass("checked");
                $("#hiddenIsActive").val(true);
                $("#StatusActive").prop('checked',true);
                $("#StatusInActive").prop('checked', false);
            }
            else {
                var ele = $("#StatusInActive").closest('div');
                console.log("ele", ele);
                var rEle = $("#StatusActive").closest('div');
                $(ele).addClass("checked");
                $(rEle).removeClass("checked");
                $("#hiddenIsActive").val(false);
                $("#StatusInActive").prop('checked',true);
                $("#StatusActive").prop('checked', false);
            }
            $("#SubCategoryId").val(record.SubCategoryId);
        }




        $("#categoryId").change(function () {
            var CategoryId = $("#categoryId").val();
            $("#hiddenCategoryId").val(CategoryId);



        });

        //$("#subcategoryname").focusout(function () {

        //});
        function checkDuplicate() {
            var f = true;
            var SubCategoryName = $("#subCategoryName").val();
            var CategoryId = $("#hiddenCategoryId").val();
            console.log("SubCategoryName", SubCategoryName);
            console.log("CategoryId", CategoryId);
            if (SubCategoryName != null && SubCategoryName != "") {
                var CheckDuplicateModel = { masterTable: "SubCategoryMaster", masterName: SubCategoryName, CategoryId: CategoryId,SubCategoryId:0,ProductName:"", isAdd: $("#isAdd").val() };
                
                $.ajax({
                    url: '@Url.Action("CheckDuplicateMaster", "Product")',
                    contentType: "application/json",
                    data: JSON.stringify(CheckDuplicateModel),
                    type: 'POST',
                    async: false,
                    success: function (objResponse) {
                        $(".preloader").hide();
                        if (objResponse != null) {
                            if (objResponse != null) {
                                if (objResponse.ResponseStatus == "FAIL") {
                                    OpenDialog("dialogMessage", "This sub category name already exists. Try another!", "false");
                                    $("#subCategoryName").val("");
                                    f=false;
                                    //reset();
                                }
                                else {
                                    f=true;
                                }
                            }
                        }
                    },
                    error: function (xhr, data) {
                        //  return false;
                        console.log(xhr);
                        console.log("Error:", data);
                    }
                });
                return f;
            }
            return f;
}
        function OpenDialog(dialogId, Message, isConfirmation) {
            if (isConfirmation == "true") {

            }
            else {
                $("#" + dialogId).empty();
                $("#" + dialogId).append('<p>' + Message + '</p>');

                $("#" + dialogId).dialog({
                    modal: true,
                    buttons: [{
                        text: "OK",
                        id: "btn" + dialogId,
                        click: function () {
                            //var isOpen = $("#dialog").dialog("isOpen");
                            //if (isOpen == true) {
                            //    okCallBack();
                            //}

                            $("#" + dialogId).dialog("close");


                        }
                    }]
                });
                $(".ui-dialog-titlebar-close").empty();
                $(".ui-dialog-titlebar-close").append('<i class="fa fa-close"></i>');
            }

        }
        function reset() {
            $("#subCategoryName").val("");
            $("#Description").val("");
            var ele = $("#StatusInActive").closest('div');
            console.log("ele", ele);
            var rEle = $("#StatusActive").closest('div');
            $(ele).removeClass("checked");
            $(rEle).addClass("checked");
            $("#StatusActive").prop('checked', true);
            $("#StatusInActive").prop('checked', false);
            $("#SubCategoryId").val(0);
            $("#isAdd").val("");
        }
    });


</script>


<div class="row">
    <div class="page-title">
        <div class="title_left">
            <h3>Product</h3>
        </div>
        <div class="title_right">
            <div class="col-md-5 col-sm-5 col-xs-12 form-group pull-right top_search">
                @*<div class="input-group">
                        <input type="text" class="form-control" placeholder="Search for...">
                        <span class="input-group-btn">
                            <button class="btn btn-default" type="button">Go!</button>
                        </span>
                    </div>*@
            </div>
        </div>
    </div>
    <div class="clearfix"></div>
    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="x_panel">
                <div class="x_title">
                    <h2>SubCategory Master</h2>
                    <ul class="nav navbar-right panel_toolbox">
                        <li>
                            <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                        </li>
                        @*<li class="dropdown">
                                <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false"><i class="fa fa-wrench"></i></a>
                                <ul class="dropdown-menu" role="menu">
                                    <li>
                                        <a href="#">Settings 1</a>
                                    </li>
                                    <li>
                                        <a href="#">Settings 2</a>
                                    </li>
                                </ul>
                            </li>*@
                        @*<li>
                                <a class="close-link"><i class="fa fa-close"></i></a>
                            </li>*@
                    </ul>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content">
                    <br />
                    <form id="subcategoryForm" method="post" name="subcategoryForm" onsubmit="false" data-parsley-validate class="validateForm form-horizontal form-label-left">
                        @Html.HiddenFor(m => m.IsAdd, new { name = "isAdd", id = "isAdd" })
                        @Html.HiddenFor(m => m.SubCatId, new { name = "SubCategoryId", id = "SubCategoryId" })
                        <div class="form-group">
                            <label class="control-label col-md-3 col-sm-3 col-xs-12" for="category-name">
                               Select Category <span class="required">*</span>
                            </label>
                            <div class="col-md-6 col-sm-6 col-xs-12">
                                @Html.HiddenFor(m => m.CategoryId,new {id="hiddenCategoryId" })
                                @Html.DropDownListFor(m => m.CategoryId, ViewBag.ListCategory as IEnumerable<SelectListItem>, new { name = "categoryId",id = "categoryId", required = "required", @class = "form-control col-md-7 col-xs-12",style="width:93%",tabindex="1" })
                                <a href="~/Product/CategoryMaster"><img src="~/images/AddCategory.png" style="width: 7%;height: 34px;"/></a>
                                @*<input type="text" id="categoryname" required="required" class="form-control col-md-7 col-xs-12">*@
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-3 col-sm-3 col-xs-12" for="category-name">
                                Sub Category Name <span class="required">*</span>
                            </label>
                            <div class="col-md-6 col-sm-6 col-xs-12">
                                @Html.TextBoxFor(m=>m.subCategoryName,new {id="subCategoryName",name= "subCategoryName", tabindex = "2", required = "required",@class="form-control"})
                                @*@Html.HiddenFor(m => m.ChildCategoryId, new { id = "hiddenChildCategoryId" })
                               @Html.DropDownListFor(m => m.ChildCategoryId, ViewBag.ListCategory as IEnumerable<SelectListItem>, new { name = "ChildCategoryId", id = "ChildCategoryId", required = "required", @class = "form-control col-md-7 col-xs-12" })
                            <a href="~/Product/CategoryMaster"><img src="~/images/AddCategory.png" style="width: 7%;height: 34px;" /></a>*@

                                @*<input type="text" id="categoryname" required="required" class="form-control col-md-7 col-xs-12">*@
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-3 col-sm-3 col-xs-12" for="category-name">
                                Description
                            </label>
                            <div class="col-md-6 col-sm-6 col-xs-12">
                                @Html.TextBoxFor(m => m.Description, new { id = "Description", name = "Description",@class = "form-control", tabindex = "3" })
                                @*@Html.HiddenFor(m => m.ChildCategoryId, new { id = "hiddenChildCategoryId" })
                   @Html.DropDownListFor(m => m.ChildCategoryId, ViewBag.ListCategory as IEnumerable<SelectListItem>, new { name = "ChildCategoryId", id = "ChildCategoryId", required = "required", @class = "form-control col-md-7 col-xs-12" })
                <a href="~/Product/CategoryMaster"><img src="~/images/AddCategory.png" style="width: 7%;height: 34px;" /></a>*@

                                @*<input type="text" id="categoryname" required="required" class="form-control col-md-7 col-xs-12">*@
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-3 col-sm-3 col-xs-12">Status</label>
                            <div class="col-md-6 col-sm-6 col-xs-12" style="margin-top: 0.9%;">
                                <div id="gender">
                                    @Html.HiddenFor(m => m.IsActive, new { id = "hiddenIsActive" })
                                    <label>
                                        
                                        @Html.RadioButtonFor(m => m.IsActive, true, new { name = "IsActive", id = "StatusActive", @class = "flat", @checked = "checked", tabindex = "4" })&nbsp; Active &nbsp;
                                        @*<input type="radio" name="status" value="male"> &nbsp; Male &nbsp;*@
                                    </label>
                                    <label>
                                        @Html.RadioButtonFor(m => m.IsActive, false, new { name = "IsActive", id = "StatusInActive", @class = "flat", tabindex = "5" })&nbsp; InActive &nbsp;
                                    </label>
                                    
                                </div>
                            </div>
                        </div>

                        <div class="ln_solid"></div>
                        <div class="form-group">
                            <div class="col-md-6 col-sm-6 col-xs-12 col-md-offset-3">

                                @if (ViewBag.UserCanAccess == "Edit")
                                {
                                    <button class="btn btn-primary" type="button" onclick="reset()">Cancel</button>
                                    <button class="btn btn-primary" type="button" onclick="reset()">Reset</button>
                                    <button type="button" id="AddButton" class="btn btn-success">Add</button>
                                }
                                
                            </div>
                        </div>
                        <div id="dialogMessage" title="Message">

                        </div>
                    </form>
                    <div class="col-lg-12">
                        <div class="form-group">
                            <table class="table bootstrap-datatable" id="grid"></table>
                            <center><span style="display:none" id="noRecord">No Records Found</span></center>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

