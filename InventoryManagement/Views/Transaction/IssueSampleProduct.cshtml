@model InventoryManagement.Entity.Common.DistributorBillModel
@using InventoryManagement.Common
@using InventoryManagement.Entity.Common
@{
    ViewBag.Title = "Issue Sample Products";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string CurrentPartyCode = (Session["LoginUser"] as User).PartyCode;
    string CurrentPartyName = (Session["LoginUser"] as User).PartyName;

    string CVCaption = Session["CVCaption"].ToString();
    string BVCaption = Session["BVCaption"].ToString();
    string PVCaption = Session["PVCaption"].ToString();
    string RPCaption = Session["RPCaption"].ToString();
    string BarcodeCaption = System.Configuration.ConfigurationManager.AppSettings["BarcodeCaption"];
}

<style>
    .RowMargin {
        margin-bottom: 1%;
    }

    .gj-grid-wrapper {
        min-width: 100% !important;
        overflow-x: scroll !important;
    }

    .ui-widget-header {
        margin-top: -1% !important;
        width: 102% !important;
        margin-left: -1% !important;
    }

    .ui-dialog-titlebar-close {
        margin-right: 1% !important;
    }

    .ui-widget-content {
        background: white !important;
        border-radius: 15px !important;
        -webkit-border-radius: 4px !important;
    }
    /*.ui-widget-header .ui-icon {
        background-color: black!important;
    }*/
    ui-autocomplete-input {
        z-index: 100;
    }

    .input-readonly {
        background-color: #EBEBE4;
    }

    #paymode_details {
        display: none;
        background: white;
        position: absolute;
        border: 1px solid black;
        border-radius: 6px;
        /*width: 100%;*/
        padding: 15px;
        overflow: hidden;
        text-shadow: none;
        z-index: 50;
    }
</style>

<script type="text/javascript">
    var IsYes = false;
    var AvailableProductList = [{}];
    var AvailableBarcodeList = [];
    var formdata;
    var ProductSearchList;
    var ItemList = [];
    var grid, dialog;
    var ProductArray;
    var SearchText;
    var count = 0;
    var billDate = "";
    var PartyList = [];
    var FullPartyList;
    var ProductGrid = [{ "AvailStock": "", "SNo": "", "Code": "", "ProductName": "","BatchNo": "", "Barcode":"", "Qty": 0 }];


    $(document).ready(function () {
        $(".preloader").hide();
        getAllProductNames();

        fillGrid();
        changeValues();
        var fullDate = new Date();
        var lengthOfMonth = ((fullDate.getMonth() + 1).toString()).length;
        var twoDigitMonth = (lengthOfMonth > 1) ? (fullDate.getMonth() + 1) : '0' + (fullDate.getMonth() + 1);
        var currentDate = fullDate.getDate() + "-" + twoDigitMonth + "-" + fullDate.getFullYear();
        $('#BillDateStr').val(currentDate);
        billDate = currentDate;

        $("#ReferenceIdNo").focus();
        $("#ProductName").focusin(function () {

            if (billDate == "") {
                OpenDialog("dialogMessage", "Please select bill date", "false");

            }
            if (billDate == "") {
                $("#BillDateStr").focus();
            }
        });
        $("#Barcode").focusin(function () {

            if (billDate == "") {
                OpenDialog("dialogMessage", "Please select bill date", "false");
            }
            if (billDate == "") {
                $("#BillDateStr").focus();
            }
        });

        $("#SearchText").focusout(function () {
            if ($(this).val() == "") {
                $(this).val("P");
            }
            changeValues();
        });

        var fullDate = new Date();
        var lengthOfMonth = ((fullDate.getMonth() + 1).toString()).length;
        var twoDigitMonth = (lengthOfMonth > 1) ? (fullDate.getMonth() + 1) : '0' + (fullDate.getMonth() + 1);

        var currentDate = fullDate.getDate() + "-" + twoDigitMonth + "-" + fullDate.getFullYear();


        $('#SearchText').bind('keydown', function (event) {
            var key = event.keyCode || event.charCode;
            var node = $(this).val();
            if (key != 8 && key != 46 && key != 13) {
                //up
                if (key == 38) {
                    $(this).val("P");
                    changeValues();
                }
                    //down
                else if (key == 40) {
                    $(this).val("B");
                    changeValues();
                }
                else {
                    if (key == 66) {
                        $(this).val("B");
                        changeValues();
                    }
                    if (key == 80) {
                        $(this).val("P");
                        changeValues();
                    }
                }
            }

        });

        $("#ProductName").keydown(function (event) {
            if (event.keyCode == 13) {
                $("#BarcodeList").focus();
                event.preventDefault();
                return false;
            }
        });


        function changeValues() {
            SearchText = $("#SearchText").val();
            console.log("iSearchText:", SearchText);
            if (SearchText == "P") {

                $("#Barcode").prop("readonly", true);
                $("#Barcode").addClass("input-readonly");
                $("#ProductName").prop("readonly", '');
                $("#ProductName").removeClass("input-readonly");
                $("#Barcode").hide();
                $("#BarcodeList").show();
                $("#BarcodeList").empty();
                $("#ProductName").show();
                $("#ProductNameList").hide();
                $("#ProductNameList").empty();
                $("#ProductName").autocomplete({
                    source: function (request, response) {
                        var results = $.ui.autocomplete.filter(ItemList, request.term);

                        response(results.slice(0, 50));
                    },
                    minLength: 1,
                    scroll: true,
                    select: function (event, ui) {

                        $("#ProductName").val(ui.item.label);
                        GetProductInfo("P", ui.item.label);
                        $("#Quantity").focus();
                        return false;
                    },

                }).focus(function () {
                    $(this).autocomplete("search", "");
                });

                $("#Barcode").unbind("focusout");
                $("#ProductName").focus();
            }
            if (SearchText == "B") {

                $("#ProductName").prop("readonly", true);
                $("#ProductName").addClass("input-readonly");
                $("#Barcode").prop("readonly", '');
                $("#Barcode").removeClass("input-readonly");
                $("#ProductName").hide();
                $("#ProductNameList").show();
                $("#ProductNameList").empty();

                $("#Barcode").show();
                $("#BarcodeList").hide();
                $("#BarcodeList").empty();
                $("#Barcode").focusout(function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    GetProductInfo("B", $("#Barcode").val());
                    $("#Quantity").focus();
                });
                $("#ProductName").unbind("autocomplete");
                $("#Barcode").focus();
            }
        }

        $("#ProductName").keydown(function (event) {
            if (event.keyCode == 13) {
                if ($("#ProductName").val().length == 0) {
                    $("#BarcodeList").focus();
                    $("#ProductName").attr('style', 'border-color:none;width:89%');
                    return true;
                }
            }
        });

        $("#AddRecordInGrid").click(function (e) {

            count++;
            if (ProductArray != undefined) {
                ProductArray.SNo = count;
            }
            var Qty = $("#Quantity").val();
            if (Qty != null && Qty != "") {
                Qty = parseFloat(Qty);
            }
            else {
                Qty = 0;
            }

            var IsReplaceRecord = false;
            if ((ProductArray != null && ProductArray.AvailStock != null) && (Qty > 0) && (Qty <= ProductArray.AvailStock && ProductArray.AvailStock != 0)) {
                var Flag = true;
                var i;
                for (i = 0; i < ProductGrid.length; i++) {
                    if (ProductGrid[i].Code == ProductArray.ProdCode) {
                        Flag = false;

                        break;
                    }
                }
                if (ProductGrid.length > 0 && ProductGrid != null) {
                    if (ProductGrid[0].SNo == "" || ProductGrid[0].SNo == null || ProductGrid[0].SNo == undefined) {
                        ProductGrid = ProductGrid.splice(1);
                    }
                }
                if (Flag) {
                    ProductGrid.push({ "AvailStock": ProductArray.AvailStock, "SNo": ProductArray.SNo, "Code": ProductArray.ProdCode, "ProductName": ProductArray.ProductName, "BatchNo": ProductArray.BatchNo, "Barcode": ProductArray.Barcode, "Qty": Qty });
                }
                else {
                    ProductGrid[i].Qty = (parseFloat(Qty)).toFixed(2);
                }
                fillGrid();
                resetProductDetails();
                $("#ProductName").val('');
                $("#Barcode").val('');
                $("#ProductNameList").empty();
                $("#BarcodeList").empty();
                SearchText = $("#SearchText").val();
                if (SearchText == "P") {
                    $("#ProductName").focus();
                }
                else {
                    $("#Barcode").focus();
                }
            }
            else {
                SearchText = $("#SearchText").val();
                var ToFocuselemement = "";
                if (SearchText == "P")
                    ToFocuselemement = "ProductName";
                else
                    ToFocuselemement = "Barcode";
                if (ProductArray.AvailStock == null || ProductArray.AvailStock == null || ProductArray.AvailStock == 0) {
                    OpenDialog("dialogMessage", "InSufficient Stock!", "false");
                    $("#" + ToFocuselemement).focus();
                }
                else if (Qty > ProductArray.AvailStock) {
                    OpenDialog("dialogMessage", "Adjust Quantity.It should be less than available stock", "false");
                    $("#Quantity").focus();
                }
                else if (Qty == 0) {
                    OpenDialog("dialogMessage", "Please Enter Quantity!", "false");
                    $("#Quantity").focus();
                }

            }
        });

        $("#ClearDetails").click(function (e) {
            $("#ProductName").val('');
            $("#Barcode").val('');
            $("#ProductNameList").empty();
            $("#BarcodeList").empty();
            resetProductDetails();
            changeValues();
        });
        function resetProductDetails() {
            $("#Quantity").val(0);
            $("#StockAvailable").val(0);
        }
        function ClearProductdetailsWithoutChangingValues() {
            $("#ProductNameList").empty();
            $("#BarcodeList").empty();
            $("#ProductName").val('');
            $("#Quantity").val(0);
            $("#StockAvailable").val(0);
        }
        function ResetDetails() {

            $("#ProductName").val('');
            $("#Barcode").val('');
            $("#ProductNameList").empty();
            $("#BarcodeList").empty();
            resetProductDetails();
            changeValues();
            ProductGrid = [{}];
            fillGrid();

        }


        function GetProductInfo(isProductSearch, data) {
            $(".preloader").show();
            var dataValue = data;
            var IsBillOnMrp = true;
            if (isProductSearch == "P" || isProductSearch == "B") {
                if (isProductSearch == "B") {
                    dataValue = $("#Barcode").val();
                }
                if (dataValue != "" && dataValue != null && dataValue != undefined) {
                    $.ajax({
                        url: '@Url.Action("GetProductInfo", "Transaction")',
                        type: 'POST',
                        data: { "SearchType": isProductSearch, "data": dataValue, "isCForm": false, "BillType": "party", "IsBillOnMrp": IsBillOnMrp, "allhalf": false },
                        dataType: "json",
                        success: function (objResult) {
                            if (objResult != null && objResult.length > 0) {
                                //fill values
                                ProductSearchList = null
                                ProductSearchList = objResult;
                                $("#ProductNameList").empty();
                                $("#BarcodeList").empty();
                                AvailableBarcodeList = [];
                                AvailableProductList = [{}];
                                if (isProductSearch == "P") {
                                    $("#ProductName").val(objResult[0].ProductName);
                                    $("#ProductHidden").val(objResult[0].ProductName);
                                    var f = true;
                                    for (var i = 0; i < objResult.length; i++) {
                                        if (f == true) {
                                            f = false;
                                            $("#BarcodeHidden").val(objResult[i].Barcode);
                                        }
                                        // $("#BarcodeList").empty();
                                        AvailableBarcodeList = AvailableBarcodeList.splice(1);
                                        AvailableBarcodeList.push(objResult[i].Barcode);
                                        console.log("AvailableBarcodeList in product info", AvailableBarcodeList);
                                        $("#BarcodeList").append("<option value=" + objResult[i].Barcode + ">" + objResult[i].Barcode + "</option>");
                                    }

                                }
                                if (isProductSearch == "B") {
                                    $("#Barcode").val(objResult[0].Barcode);
                                    $("#BarcodeHidden").val(objResult[0].Barcode);
                                    var f = true;
                                    for (var i = 0; i < objResult.length; i++) {
                                        if (f == true) {
                                            f = false;
                                            $("#ProductHidden").val(objResult[i].ProductName);
                                        }
                                        AvailableProductList = AvailableProductList.splice(1);
                                        AvailableProductList.push({ "ProdCode": objResult[i].ProdCode, "ProductName": objResult[i].ProductName });
                                        $("#ProductNameList").append("<option value=" + objResult[i].ProdCode + ">" + objResult[i].ProductName + "</option>");
                                    }

                                }
                                fillProductValues(objResult[0]);
                            }
                            else {
                                OpenDialog("dialogMessage", "No Product Found!", "false");
                                //$("#ProductName").val("");

                                ClearProductdetailsWithoutChangingValues();
                            }
                            $(".preloader").hide();
                        },
                        error: function (xhr, data) {
                            //  return false;
                            console.log(xhr);
                            console.log("Error:", data);
                        }
                    });
                }

            }
        }
        $("#ProductNameList").change(function () {
            var SelectedVal = $("#ProductNameList").val()
            $("#ProductHidden").val(SelectedVal);
            if (ProductSearchList != null && ProductSearchList.length > 0) {
                for (var i = 0; i < ProductSearchList.length; i++) {
                    if (SelectedVal == ProductSearchList[i].ProductName) {
                        fillProductValues(ProductSearchList[i]);
                        break;
                    }
                }
            }
            $("#Quantity").focus();
        });
        $("#BarcodeList").change(function () {
            var SelectedVal = $("#BarcodeList").val();
            $("#BarcodeHidden").val(SelectedVal);
            if (ProductSearchList != null && ProductSearchList.length > 0) {
                for (var i = 0; i < ProductSearchList.length; i++) {
                    if (SelectedVal == ProductSearchList[i].Barcode) {
                        fillProductValues(ProductSearchList[i]);
                        break;
                    }
                }
            }
            $("#Quantity").focus();
        });
        function fillProductValues(objResult) {
            SearchText = $("#SearchText").val();
            var TempProductArray = [{}];

            var Qty = $("#Quantity").val();
            if (Qty != "" && Qty != null) {
                Qty = parseFloat(Qty);
            }
            else {
                Qty = 0;
            }
            if ((TempProductArray[0].SNo) != undefined) {
                TempProductArray = TempProductArray.splice(1);
            }


            TempProductArray.push({ "AvailStock": objResult.StockAvailable, "SNo": count, "ProductName": objResult.ProductName, "Barcode": objResult.Barcode, "BatchNo": objResult.BatchNo, "ProdCode": objResult.ProdCode, "Qty": Qty });
            if (SearchText == "P") {
                $("#ProductName").val(objResult.ProductName);
                $("#BarcodeList").val(objResult.Barcode);
            }
            else {
                $("#Barcode").val(objResult.Barcode);
                $("#ProductList").val(objResult.ProductName);
            }



            $("#StockAvailable").val(objResult.StockAvailable);
            $("#Quantity").val(0);

            ProductArray = TempProductArray[1];
        }

        function getAllProductNames() {
            $.ajax({
                url: '/Transaction/GetAllProductNames',
                dataType: 'JSON',
                method: 'GET',
                data: { 'RestrictedproductsAlso': false, 'ProdFor': 'A', 'forFrOrder': false, 'forDrOrder': false },
                success: function (data) {
                    ItemList = [];
                    if (data != null) {
                        var i = 0;
                        for (i = 0; i < data.length; i++) {
                            ItemList.push(data[i]);
                        }
                    }
                },
                error: function (error) {
                    console.log(error);
                }
            });
        }

        function Delete(e) {
            if (confirm('Are you sure?')) {
                console.log(e);
                var RecordNo = e.data.record.SNo;
                ProductGrid = $.grep(ProductGrid, function (e) {
                    return e.SNo != RecordNo;
                });
                count--;
                fillGrid();
            }
        }

        function fillGrid() {
            if (ProductGrid.length >= 1) {
                if (ProductGrid[0].SNo == "" || ProductGrid[0].SNo == null || ProductGrid[0].SNo == undefined)
                    ProductGrid = ProductGrid.splice(1);
            }
            $("#noRecord").hide();
            if (grid != null) {
                grid.destroy();
                $('#grid').empty();

            }
            grid = $('#grid').grid({
                dataSource: ProductGrid,
                uiLibrary: 'bootstrap',
                headerFilter: false,
                columns: [
                    { field: 'SNo', title: 'S.No.', width: 80, sortable: true, hidden: false, filterable: false },
                    { field: 'Code', title: 'Code', width: 100, sortable: true, hidden: false, filterable: true },
                    { field: 'ProductName', width: 150, title: 'Product Name', sortable: true, hidden: false, filterable: true },
                    { field: 'AvailStock', title: 'Stock Avail.', width: 80, sortable: true, hidden: false, filterable: false },
                    { field: 'Qty', width: 80, title: 'Qty', sortable: true, hidden: false, filterable: true },
                    { field: 'BatchNo', width: 100, title: 'Batch No.', sortable: true, hidden: true, filterable: true },
                    { field: 'Barcode', width: 100, title: '@BarcodeCaption', sortable: true, hidden: false, filterable: true },
                    { title: '', field: 'Delete', width: 30, type: 'icon', icon: 'glyphicon-remove', tooltip: 'Delete', events: { 'click': Delete }, filterable: false }
                ],
                pager: { limit: 20, sizes: [15, 20, 35, 50, 65, 80, 95, 100] }
            });
            grid.on('rowSelect', function (e, $row, id, record) {
                FillGridValuesInTextBox(record)
            });
        }

        function FillGridValuesInTextBox(objResult) {
            SearchText = $("#SearchText").val();
            var TempProductArray = [{}];
            if ((TempProductArray[0].SNo) != undefined) {
                TempProductArray = TempProductArray.splice(1);
            }
            TempProductArray.push({ "AvailStock": objResult.AvailStock, "SNo": objResult.SNo, "ProductName": objResult.ProductName, "BatchNo": objResult.BatchNo, "Barcode": objResult.Barcode, "ProdCode": objResult.Code, "Qty": objResult.Qty, "AvailStock": objResult.AvailStock, "TaxType": objResult.TaxType, "MRP": objResult.MRP, "DP": objResult.DP, "RP": objResult.RP, "BV": objResult.BV, "CV": objResult.CV, "PV": objResult.PV, "CommsnPer": objResult.CommsnPer, "DiscPer": objResult.DiscPer, "TaxPer": objResult.TaxPer, "CommssnAmt": objResult.CommsnAmt, "TaxAmt": objResult.TaxAmt, "RPValue": objResult.RPValue, "CVValue": objResult.CVValue, "PVValue": objResult.PVValue, "BVValue": objResult.BVValue, "DiscAmt": objResult.DiscAmt, "Amount": objResult.Amount, "TotalAmt": objResult.TotalAmount, "Rate": objResult.Rate });
            if (SearchText == "P") {
                $("#ProductName").val(objResult.ProductName);
                for (var i = 0; i < AvailableBarcodeList.length; i++) {
                    $("#BarcodeList").append("<option value=" + AvailableBarcodeList[i] + ">" + AvailableBarcodeList[i] + "</option>");
                }
                $("#BarcodeList").val(objResult.Barcode);
            }
            else {
                $("#Barcode").val(objResult.Barcode);
                for (var i = 0; i < AvailableProductList.length; i++) {

                    $("#ProductList").append("<option value=" + AvailableProductList[i].ProdCode + ">" + AvailableProductList[i].ProductName + "</option>");
                }
                $("#ProductList").val(objResult.Code);
            }
            $("#StockAvailable").val(objResult.AvailStock);
            $("#Quantity").val(objResult.Qty);
            ProductArray = TempProductArray[1];
        }

        function OpenDialog(dialogId, Message, isConfirmation) {
            $("#" + dialogId).empty();
            $("#" + dialogId).append('<p>' + Message + '</p>');
            if (isConfirmation == "true") {
                $("#" + dialogId).dialog({
                    modal: true,
                    buttons: [{
                        text: "Yes",
                        id: "btnYes" + dialogId,
                        click: function () {
                            //var isOpen = $("#dialog").dialog("isOpen");
                            //if (isOpen == true) {
                            //    okCallBack();
                            //}
                            IsYes = true;
                            $("#" + dialogId).dialog("close");


                        }
                    },
                    {
                        text: "No",
                        id: "btnNo" + dialogId,
                        click: function () {
                            //var isOpen = $("#dialog").dialog("isOpen");
                            //if (isOpen == true) {
                            //    okCallBack();
                            //}
                            IsYes = false;
                            $("#" + dialogId).dialog("close");
                        }
                    }
                    ]
                });
                $(".ui-dialog-titlebar-close").empty();
                $(".ui-dialog-titlebar-close").append('<i class="fa fa-close"></i>');
            }
            else {


                $("#" + dialogId).dialog({
                    modal: true,
                    buttons: [{
                        text: "OK",
                        id: "btn" + dialogId,
                        click: function () {
                            //var isOpen = $("#dialog").dialog("isOpen");
                            //if (isOpen == true) {
                            //    okCallBack();
                            //}

                            $("#" + dialogId).dialog("close");


                        }
                    }]
                });
                $(".ui-dialog-titlebar-close").empty();
                $(".ui-dialog-titlebar-close").append('<i class="fa fa-close"></i>');
            }

        }


        $("#cancelClick").click(function () {
            ResetDetails();
        });

        $("form[name=distributorForm]").unbind("submit");
        $("form[name=distributorForm]").bind('submit', function (e) {
            $("#SavePartyForm").attr("disabled", true);

            var BillDateError = false;
            if (billDate == "" || billDate == null) {
                BillDateError = true;
            }
            if (BillDateError == false) {

                if (ProductGrid != null) {
                    if (ProductGrid[0].SNo == "" || ProductGrid[0].SNo == null || ProductGrid[0].SNo == undefined) {
                        ProductGrid = ProductGrid.splice(1);
                    }
                }
                if (ProductGrid.length > 0) {
                    e.preventDefault();
                    e.stopPropagation();
                    var ListObjStr = JSON.stringify(ProductGrid);
                    $("#ListObjHidden").val(ListObjStr);
                    formdata = new FormData($(this)[0]);
                    SaveBill();
                }
                else {
                    $("#SavePartyForm").attr("disabled", false);
                    OpenDialog("dialogMessage", "There should be atleast one product in grid", "false");
                }

            }
            else {
                OpenDialog("dialogMessage", "Please select bill date", "false");
            }

        });

        function SaveBill() {
            $(".preloader").show();
            $.ajax({
                url: '@Url.Action("SaveIssueSampleProducts", "Transaction")',
                type: 'POST',
                data: formdata,
                processData: false,
                contentType: false,
                dataType: "json",
                success: function (objResponse) {
                    if (objResponse != null) {
                        if (objResponse.ResponseStatus == "OK") {
                            OpenDialog("dialogMessage", objResponse.ResponseMessage, "false");
                            window.location.href = '@Url.Action("IssueSampleProduct", "Transaction")';
                            $("#SavePartyForm").attr("disabled", false);
                        }
                        else {
                            OpenDialog("dialogMessage", "Something went wrong", "false");
                            $("#SavePartyForm").attr("disabled", false);
                        }
                    }
                    $(".preloader").hide();
                },
                error: function (xhr, data) {
                    $("#SavePartyForm").attr("disabled", false);
                    console.log(xhr);
                    console.log("Error:", data);
                }
            });
        }

        $("#BillDateStr").datetimepicker({
            format: 'DD-MM-YYYY',
            widgetPositioning: {
                horizontal: 'auto',
                vertical: 'bottom'
            }

        }).on('dp.change', function (e) {
            var selectedDate = e.date._d;
            var lengthOfMonth = ((selectedDate.getMonth() + 1).toString()).length;
            var twoDigitMonth = (lengthOfMonth > 1) ? (selectedDate.getMonth() + 1) : '0' + (selectedDate.getMonth() + 1);
            var newDate = selectedDate.getDate() + "-" + twoDigitMonth + "-" + selectedDate.getFullYear();
            billDate = newDate;
        });

    });
</script>

<div class="row">

    <div class="clearfix"></div>

    <div class="row">
        <div class="col-lg-12 ">
            <div class="x_panel">
                <div class="x_title">
                    <h2>Transaction > Issue Sample Products</h2>

                    <ul class="nav navbar-right panel_toolbox">
                        <li>
                            <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                        </li>

                    </ul>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content">
                    <br />
                    <form id="distributorForm" method="post" name="distributorForm" onsubmit="false" data-parsley-validate class="validateForm form-horizontal form-label-left">

                        @Html.HiddenFor(m => m.objProductListStr, new { name = "ListObjHidden", id = "ListObjHidden" })

                        <div class="row RowMargin">
                            <div class="col-lg-12">
                                <center><h5 style="color:red">Press Shift+n to focus out of Product Section</h5></center>
                            </div>
                        </div>
                        <div class="row RowMargin">
                            <div class="col-lg-4">

                                <label class="control-label col-lg-4" for="category-name">
                                    Ref No.: @*<span class="required">*</span>*@
                                </label>
                                <div class="col-lg-8">
                                    @Html.TextBoxFor(m => m.objCustomer.ReferenceIdNo, new { name = "ReferenceIdNo", tabindex = "0", id = "ReferenceIdNo", @maxlength = "20", @class = "form-control" })
                                </div>

                            </div>
                            <div class="col-lg-4">
                                <label class="control-label col-lg-4" for="category-name">
                                    Bill Date: @*<span class="required">*</span>*@
                                </label>
                                <div class="col-lg-8">
                                    @Html.TextBoxFor(m => m.BillDateStr, new { name = "BillDateStr", id = "BillDateStr", tabindex = "0", @class = "form-control" })
                                </div>
                            </div>
                            <div class="col-lg-4">
                                &nbsp;
                            </div>

                        </div>
                        <div class="row RowMargin">
                            <div class="col-lg-8">

                                <label class="control-label col-lg-2" for="category-name">
                                    Issue to : @*<span class="required">*</span>*@
                                </label>
                                <div class="col-lg-10" style="padding-left: 1%;">
                                    @Html.HiddenFor(m => m.objCustomer.PartyCode, new { id = "PartyCode", name = "PartyCode" })
                                    @Html.TextBoxFor(m => m.objCustomer.PartyName, new { name = "PartyName", id = "PartyName", tabindex = "0", @class = "form-control" })
                                </div>

                            </div>

                            <div class="col-lg-4">
                                &nbsp;
                            </div>

                        </div>
                        <div class="row RowMargin">
                            <div class="col-lg-4">
                                <label class="control-label col-lg-4" for="category-name">
                                    Remarks:
                                </label>
                                <div class="col-lg-8">
                                    @Html.TextBoxFor(m => m.objCustomer.Remarks, new { name = "Remarks", id = "Remarks", @class = "form-control" })
                                </div>

                            </div>
                            <div class="col-lg-4">
                                &nbsp;
                            </div>
                            <div class="col-lg-4">
                                &nbsp;
                            </div>

                        </div>


                        <div class="row RowMargin">

                            <div class="col-lg-12" style="margin-top: 2%;margin-bottom: 2%;">
                                <label class="control-label"><u>Product Details:</u></label>
                            </div>
                            <div class="ln_solid" style="margin-top:18px"></div>
                            <div class="col-lg-12">
                                <div class="col-lg-6">
                                    <label class="control-label col-lg-2" for="category-name" style="padding-left: 0px;">
                                        Product
                                    </label>
                                    <div class="col-lg-8" style="padding-left:0px">
                                        <input class="form-control col-lg-5 input-readonly" style="width:11%" type="text" id="SearchText" name="SearchText" value="P" maxlength="1" />
                                        @Html.HiddenFor(m => m.objProduct.ProductName, new { id = "ProductHidden" })
                                        @Html.TextBoxFor(m => m.objProduct.ProductName, new { tabindex = "0", name = "ProductName", id = "ProductName", @class = "form-control col-lg-7", @style = "width:89%" })
                                        <select tabindex="0" name="ProductNameList" id="ProductNameList" style="display:none;width:89%" class="form-control col-lg-7">
                                            <option value="0">--Select product</option>
                                        </select>
                                    </div>

                                </div>

                                <div class="col-lg-6">
                                    <label class="control-label col-lg-2" for="category-name">
                                        @BarcodeCaption
                                    </label>
                                    <div class="col-lg-8" style="padding-right:0px">
                                        @Html.HiddenFor(m => m.objProduct.Barcode, new { id = "BarcodeHidden" })
                                        @Html.TextBoxFor(m => m.objProduct.Barcode, new { tabindex = "0", name = "Barcode", id = "Barcode", @class = "form-control", @readonly = "readonly" })
                                        <select tabindex="0" name="BarcodeList" id="BarcodeList" style="display:none;width:100%" class="form-control">
                                            <option value="0">--Select barcode</option>
                                        </select>
                                    </div>

                                </div>
                            </div>
                        </div>

                        <div class="row RowMargin">
                            <div class="col-lg-6">
                                <label class="control-label col-lg-2" for="category-name">
                                    Qty
                                </label>
                                <div class="col-lg-8">

                                    @Html.TextBoxFor(m => m.objProduct.Quantity, new { name = "Quantity", maxlength = "10", tabindex = "0", id = "Quantity", @style = "width:50%", @class = "form-control col-lg-6 onlyDecimalValues" })
                                    @Html.TextBoxFor(m => m.objProduct.StockAvailable, new { name = "StockAvailable", @style = "width:50%", id = "StockAvailable", @class = "form-control col-lg-6", @readonly = "readonly" })
                                </div>

                            </div>
                        </div>

                        <div class="row RowMargin">
                            <div class="col-lg-6 col-lg-offset-3">

                                @*<button class="btn btn-primary" type="reset" onclick="reset()">Reset</button>*@
                                <button type="button" id="AddRecordInGrid" class="btn btn-success" tabindex="0">Add</button>
                                <button class="btn btn-primary" type="button" id="ClearDetails" tabindex="0">Clear</button>
                            </div>
                        </div>

                        <div class="ln_solid"></div>

                        @*grid section*@
                        <div class="row RowMargin">
                            <div class="col-lg-12">
                                <table class="table bootstrap-datatable" id="grid"></table>
                                <center><span style="display:none" id="noRecord">No Records Found</span></center>

                            </div>
                        </div>

                        <div class="row RowMargin">
                            <div class="col-lg-6 col-md-offset-3">
                                <button type="submit" id="SavePartyForm" class="btn btn-success" tabindex="0">Save</button>
                                <button class="btn btn-primary" type="button" tabindex="0" id="cancelClick">Cancel</button>
                            </div>
                        </div>
                        <div id="dialogMessage" title="Message">

                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
