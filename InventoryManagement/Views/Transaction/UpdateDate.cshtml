@model InventoryManagement.Entity.Common.SalesReport
@using InventoryManagement.Common
@using InventoryManagement.Entity.Common
@{
    ViewBag.Title = "UpdateDate";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string CurrentPartyCode = (Session["LoginUser"] as User).PartyCode;
    string CurrentPartyName = (Session["LoginUser"] as User).PartyName;
}

<style>
    .ui-widget-header {
        margin-top: -1% !important;
        width: 102% !important;
        margin-left: -1% !important;
    }
     .gj-grid-wrapper {
        min-width: 100% !important;
        overflow-x: scroll !important;
    }
    .ui-dialog-titlebar-close {
        margin-right: 1% !important;
    }

    .ui-widget-content {
        background: white !important;
        border-radius: 15px !important;
        -webkit-border-radius: 4px !important;
    }
    /*.ui-widget-header .ui-icon {
        background-color: black!important;
    }*/
    ui-autocomplete-input {
        z-index: 100;
    }

    .input-readonly {
        background-color: #EBEBE4;
    }
</style>
<script type="text/javascript">
    var FromDate = "";
    var ToDate = "";
    var DispMode = "";
    var SoldBy = "";
    var OrderDispatchList = "";
    var OrderDispatchArray = [{}];
    var IsId = false;
    var IsOrder = false;
    var IsParty = false;    
    var IsDateFilter = false;
    var grid, dialog;
    var OrderProductGrid = [{}];
    var ViewType = "Pending";
    var PartyList = [];
    var PartyCode = "";
    var IdNo = "";
    var OrderNo = "";
    var FullPartyList;
    var OrderNoToReject = 0;
    var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    $(document).ready(function () {
       
        $(".preloader").hide();
        // FullProductList = ProductListJson;
        GetAllParty();
        var dateToday = new Date();
        
        $("#btnShowReport").click(function () {
            $("#Pending_Save").show();
            GetBillDetails(FromDate, ToDate,  PartyCode);
        });


        $("#PartyName").autocomplete({
            source: function (request, response) {
                var results = $.ui.autocomplete.filter(PartyList, request.term);
                response(results.slice(0, 50));

            },
            minLength: 1,
            scroll: true,
            select: function (event, ui) {
                console.log("ui.item", ui.item.label);
                $("#PartyName").val(ui.item.label);
                SetSpecificCode("Party", ui.item.label);
                return false;
            },

        }).focus(function () {
            $(this).autocomplete("search", "");
        });


        $('#IsParty').on('ifChecked', function () {
            //console.log("checked");
            IsParty = true;
            $("#PartyName").val("All");
            $("#PartyName").prop("readonly", "readonly");
            $("#PartyCode").val(0);
            PartyCode=0;
        });

        $('#IsParty').on('ifUnchecked', function () {
            //console.log("checked");
            IsParty = false;
            $("#PartyName").val("");
            $("#PartyName").prop("readonly", "");
            $("#PartyCode").val("");
            PartyCode=0;
        });

        $('#IsDateFilter').on('ifChecked', function () {
            IsDateFilter = true;
            $("#StartDate").val("All");
            $("#StartDate").prop("readonly", "readonly");
             $("#EndDate").val("All");
             $("#EndDate").prop("readonly", "readonly");
             FromDate = "All";
             ToDate = "All";
            
        });

        $('#IsDateFilter').on('ifUnchecked', function () {
            IsDateFilter = false;
            $("#StartDate").val("");
            $("#StartDate").prop("readonly", "");
            $("#EndDate").val("");
            $("#EndDate").prop("readonly", "");
            FromDate = "";
            ToDate = "";
        });

        var dateToday = new Date();
        dateToday.setMonth(dateToday.getMonth() - 1);       
        var max = new Date;
        $("#StartDate").datetimepicker({
            format: 'DD-MMM-YYYY',
            maxDate: new Date(),
            widgetPositioning: {
                horizontal: 'auto',
                
                vertical: 'bottom'
            }
        }).on('dp.change', function (e) {
            var selectedDate = e.date._d;
            var lengthOfMonth = ((selectedDate.getMonth() + 1).toString()).length;
            var twoDigitMonth = (lengthOfMonth > 1) ? (selectedDate.getMonth() + 1) : '0' + (selectedDate.getMonth() + 1);
            var lengthOfDate = ((selectedDate.getDate()).toString()).length;
            var twoDigitDate = (lengthOfDate > 1) ? (selectedDate.getDate()) : '0' + (selectedDate.getDate());
            var newFromDate = twoDigitDate + "-" + twoDigitMonth + "-" + selectedDate.getFullYear();
            FromDate = newFromDate;                      
        });


        $("#EndDate").datetimepicker({
            format: 'DD-MMM-YYYY',
            maxDate: new Date(),
            widgetPositioning: {
                horizontal: 'auto',
                vertical: 'bottom'
            }

        }).on('dp.change', function (e) {
            var selectedDate = e.date._d;
            var lengthOfMonth = ((selectedDate.getMonth() + 1).toString()).length;
            var twoDigitMonth = (lengthOfMonth > 1) ? (selectedDate.getMonth() + 1) : '0' + (selectedDate.getMonth() + 1);
            var lengthOfDate = ((selectedDate.getDate()).toString()).length;
            var twoDigitDate = (lengthOfDate > 1) ? (selectedDate.getDate()) : '0' + (selectedDate.getDate());
            var newToDate = twoDigitDate + "-" + twoDigitMonth + "-" + selectedDate.getFullYear();
            ToDate = newToDate;            
        });

        $("#NewDate").datetimepicker({
            format: 'DD-MMM-YYYY',
            minDate: dateToday,
            maxDate:new Date(),  
            widgetPositioning: {
                horizontal: 'auto',
                vertical: 'bottom'
            }

        }).on('dp.change', function (e) {
            var selectedDate = e.date._d;
            var lengthOfMonth = ((selectedDate.getMonth() + 1).toString()).length;
            var twoDigitMonth = (lengthOfMonth > 1) ? (selectedDate.getMonth() + 1) : '0' + (selectedDate.getMonth() + 1);
            var newFromDate = selectedDate.getDate() + "-" + months[selectedDate.getMonth()] + "-" + selectedDate.getFullYear();
        });

        $("#NewDate").val("");
        $("#StartDate").val("");
        $("#EndDate").val("");

        $("#YesBtn").click(function () {
            var ReasonReject = $("#ReasonToReject").val();
            $("#YesBtn").attr("disabled", true);
            RejectThisOrder(OrderNoToReject, ReasonReject);
        });
        $("#NoBtn").click(function () {
            OrderNoToReject = 0;
            $("#YesBtn").attr("disabled", false);
            $("#dialogReject").dialog("close");
        });

        $("form[name=DispatchOrderForm]").unbind("submit");
        $("form[name=DispatchOrderForm]").bind('submit', function (e) {
            $("#Dispatch").prop("readonly", "readonly");
            if (OrderProductGrid.length > 0) {
                e.preventDefault();
                e.stopPropagation();
                var ListObjStr = JSON.stringify(OrderProductGrid);
                console.log("ListObjStr", ListObjStr);
                $("#BillList").val(ListObjStr);
                formdata = new FormData($(this)[0]);
                console.log("formdata", formdata);
                UpdateBillDate_(formdata);
            }
            else {
                $("#Dispatch").prop("readonly", "");
                OpenDialog("dialogMessage", "There should be atleast one order to dispatch!", "false");
            }
        });

    });

    function UpdateBillDate_(formdata) {
        $(".preloader").show();
        var newBillDate = $("#NewDate").val();
        if (newBillDate == "") {
            OpenDialog("dialogMessage", "Please enter New date.", "false");
        }
        else {
            console.log("form data = > " + formdata);
            $.ajax({
                url: '@Url.Action("UpdateBillDate", "Transaction")',
                type: 'POST',
                data: formdata,
                processData: false,
                contentType: false,
                dataType: "json",
                success: function (objResponse) {
                    if (objResponse != null) {
                        if (objResponse.ResponseStatus == "OK") {                            
                            GetBillDetails(FromDate, ToDate, PartyCode);
                        }
                        else {
                            OpenDialog("dialogMessage", objResponse.ResponseMessage, "false");
                        }
                    }
                },
                error: function (xhr, data) {
                    console.log(xhr);
                    console.log("Error:", data);
                }
            });
        }
    }
    function SetToSaveOrder(BillNo, IsChecked) {
        console.log("IsChecked", IsChecked);
        for (var i = 0; i < OrderProductGrid.length; i++) {
            if (OrderProductGrid[i].BillNo == BillNo) {
                if (IsChecked) {
                    OrderProductGrid[i].IsUpdate = true;
                    break;
                }
                else {
                    OrderProductGrid[i].IsUpdate = false;
                    break;
                }
            }
        }
    }



    function OpenOrderDetails() {
        $("#dialogOrder").dialog({
            width:500,
            modal: true,
            buttons: [{
                text: "OK",
                id: "btndialogOrder",
                click: function () {
                    //var isOpen = $("#dialog").dialog("isOpen");
                    //if (isOpen == true) {
                    //    okCallBack();
                    //}

                    $("#dialogOrder").dialog("close");


                }
            }]
        });
        $(".ui-dialog-titlebar-close").empty();
        $(".ui-dialog-titlebar-close").append('<i class="fa fa-close"></i>');
    }

    function GetBillDetails(FromDate,ToDate,PartyCode){
        $(".preloader").show();
        var DateError = false;
        
        if (FromDate != "" && FromDate != null && ToDate != null && ToDate != ""&& FromDate!="All"&&ToDate!="All") {
            //var d1 = new Date(FromDate);
            //var d2 = new Date(ToDate);
            console.log("FromDate in get", FromDate);
            console.log("ToDate in get", ToDate);
            var d1 = toFormatDate(FromDate);
            var d2 = toFormatDate(ToDate);
            console.log("d1", d1);
            console.log("d2", d2);
            if (d1 > d2) {
                DateError = true;
                $(".preloader").hide();
                OpenDialog("dialogMessage", "From Date should be less than ToDate!", "false");
                //$("#StartDate").focus();
            }
            else {
                DateError = false;
                console.log("in else");

            }
        }
        else {
            DateError = false;
            
            if (FromDate == "" || FromDate == null) {
                FromDate = "All";
            } if (ToDate == "" || ToDate == null) {
                ToDate = "All";
            }
        }


        if (PartyCode == "" || PartyCode == null) {
                PartyCode = 0;
        }

        if (DateError == false) {

            console.log("FromDate", FromDate);
            console.log("ToDate", ToDate);

            $.ajax({
                url: '@Url.Action("GetSalesReport", "Report")',
                    type: 'POST',
                    data: { "FromDate": FromDate, "ToDate": ToDate, "CustomerId": "All", "ProductCode": "", "CategoryCode": "", "PartyCode": PartyCode, "BType": "S", "SalesType": "BillWise", "InvoiceType": "", "FType": "M", "OfferUID": 99 },

                dataType: "json",
                success: function (objResult) {
                    OrderProductGrid = [{}];
                    if (objResult.length > 0) {

                        OrderProductGrid = OrderProductGrid.splice(1);
                        for (var i = 0; i < objResult.length; i++) {
                            var encodedparameters = objResult[i].BillNo;
                            var InvoicePath = '@Url.Action("InvoicePrint", "Transaction", new { Pm = "-1" })';
                            var EncryptedB64Url = window.btoa(encodedparameters);
                            console.log("EncryptedB64Url", EncryptedB64Url);
                            InvoicePath = InvoicePath.replace("-1", EncryptedB64Url);
                              var TaxAmount = objResult[i].IGSTAmount + objResult[i].CGSTAmount + objResult[i].SGSTAmount;
                            OrderProductGrid.push({ "InvoicePath": InvoicePath, "SNo": i + 1, "BillNo": objResult[i].BillNo, "BillDate": objResult[i].StrBillDate, "PartyCode": objResult[i].PartyCode, "PartyName": objResult[i].PartyName, "Code": objResult[i].CustCode, "Name": objResult[i].CustName, "BVValue": objResult[i].TotalBV, "Amount": objResult[i].Amount, "TaxAmount": TaxAmount, "IGSTAmount": objResult[i].IGSTAmount, "CGSTAmount": objResult[i].CGSTAmount, "SGSTAmount": objResult[i].SGSTAmount, "NetAmount": objResult[i].NetAmount });
                        }
                       $("#noRecord").hide();

                    }
                    else {
                        $("#noRecord").show();
                    }
                    fillGrid();
                    $(".preloader").hide();
                },
                error: function (xhr, data) {
                    //  return false;
                    console.log(xhr);
                    console.log("Error:", data);
                }
            });
        }
    }
    function GetAllParty() {
        $.ajax({
            url: '/Report/GetAllPartyListForReports',
            dataType: 'JSON',
            method: 'GET',
            //data: { 'LedgerName': '' },
            success: function (data) {
                console.log("data:", data);
                //response(data);
                FullPartyList = data;
                PartyList = [];
                if (data != null) {
                    var i = 0;
                    for (i = 0; i < data.length; i++) {
                        //console.log("data[i]", data[i]);
                        PartyList.push(data[i].PartyName);
                    }
                }
            },
            error: function (error) {
                console.log(error);
            }
        });
    }

    function toFormatDate(dateStrToFormat) {
        // console.log("dateStr", dateStr);
        var parts = dateStrToFormat.split("-");
        return new Date(parts[2], parts[1] - 1, parts[0]);
    }
    function SetSpecificCode(type, label) {

        if (type == "Party") {
            for (var i = 0; i < FullPartyList.length; i++) {
                if (FullPartyList[i].PartyName == label) {
                    PartyCode=FullPartyList[i].PartyCode;
                    break;
                }
            }
        }
    }
    function OpenDialog(dialogId, Message, isConfirmation) {
        $("#" + dialogId).empty();
        $("#" + dialogId).append('<p>' + Message + '</p>');
        if (isConfirmation == "true") {
            $("#" + dialogId).dialog({
                modal: true,
                buttons: [{
                    text: "Yes",
                    id: "btnYes" + dialogId,
                    click: function () {
                        //var isOpen = $("#dialog").dialog("isOpen");
                        //if (isOpen == true) {
                        //    okCallBack();
                        //}
                        IsYes = true;
                        $("#" + dialogId).dialog("close");


                    }
                },
                {
                    text: "No",
                    id: "btnNo" + dialogId,
                    click: function () {
                        //var isOpen = $("#dialog").dialog("isOpen");
                        //if (isOpen == true) {
                        //    okCallBack();
                        //}
                        IsYes = false;
                        $("#" + dialogId).dialog("close");
                    }
                }
                ]
            });
            $(".ui-dialog-titlebar-close").empty();
            $(".ui-dialog-titlebar-close").append('<i class="fa fa-close"></i>');
        }
        else {


            $("#" + dialogId).dialog({
                modal: true,
                buttons: [{
                    text: "OK",
                    id: "btn" + dialogId,
                    click: function () {
                        //var isOpen = $("#dialog").dialog("isOpen");
                        //if (isOpen == true) {
                        //    okCallBack();
                        //}

                        $("#" + dialogId).dialog("close");


                    }
                }]
            });
            $(".ui-dialog-titlebar-close").empty();
            $(".ui-dialog-titlebar-close").append('<i class="fa fa-close"></i>');
        }

    }
    function fillGrid() {
        console.log("BillList", OrderProductGrid);

        $("#noRecord").hide();
        $("#EndDate")
        if (grid != null) {
            grid.destroy();
            $('#grid').empty();

        }
            grid = $('#grid').grid({
                dataSource: OrderProductGrid,
                uiLibrary: 'bootstrap',
                headerFilter: true,
                selectionType: 'multiple',
                selectionMethod: 'checkbox',
                columns: [
                    { field: 'SNo', title: 'S.No.', width: 80, sortable: true, hidden: false, filterable: false },
                 { field: 'BillNo', title: 'Bill No', width: 100, sortable: true, hidden: false, filterable: true, tmpl: '<a target="_blank" style="text-decoration:underline;color:blue" href={InvoicePath}>{BillNo}</a>', align: 'center' },
                  { field: 'BillDate', title: 'Bill Date', width: 100, sortable: true, hidden: false, filterable: true },
                   { field: 'PartyCode', title: 'Party Code', width: 90, sortable: true, hidden: false, filterable: true },
                    { field: 'PartyName', title: 'Party Name', width: 150, sortable: true, hidden: false, filterable: true },
                    { field: 'Code', title: 'Cust. Code', width: 100, sortable: true, hidden: false, filterable: true },
                    { field: 'Name', title: 'Cust. Name', width: 150, sortable: true, hidden: false, filterable: true },
                    { field: 'BVValue', title: 'Total BV', width: 80, sortable: true, hidden: false, filterable: true },
                    { field: 'Amount', title: 'Amount', width: 80, sortable: true, hidden: false, filterable: true },
                    //{ field: 'TaxAmount', title: 'Tax Amount', sortable: true, hidden: false, filterable: true },
                    { field: 'IGSTAmount', width: 80, title: 'IGST/Tax Amt.', sortable: true, hidden: false, filterable: true },
                    { field: 'CGSTAmount', width: 80, title: 'CGST Amt.', sortable: true, hidden: false, filterable: true },
                    { field: 'SGSTAmount', width: 80, title: 'SGST Amt.', sortable: true, hidden: false, filterable: true },
                    { field: 'NetAmount', width: 80, title: 'Net Amount', sortable: true, hidden: false, filterable: true }, ],
                pager: { limit: 20, sizes: [15, 20, 35, 50, 65, 80, 95, 100] }
            });
            grid.on('rowSelect', function (e, $row, id, record) {
                //console.log(e);
                //console.log($row);
                //console.log(id);
                //console.log(record);
                var SelectedOrderNo = "";
                if (record != null && record != undefined) {
                    console.log("BillNo", record.BillNo);
                    SelectedOrderNo = record.BillNo;
                }
                else {
                    console.log("BillNo", id.BillNo);
                    SelectedOrderNo = id.BillNo;
                }
                SetToSaveOrder(SelectedOrderNo, true);
                //alert('Row with OrderNo=' + record.OrderNo + ' is selected.');
            });
            grid.on('rowUnselect', function (e, $row, id, record) {
                var SelectedOrderNo = "";
                if (record != null && record != undefined) {
                    console.log("BillNo", record.BillNo);
                    SelectedOrderNo = record.BillNo;
                }
                else {
                    console.log("BillNo", id.BillNo);
                    SelectedOrderNo = id.BillNo;
                }
                SetToSaveOrder(SelectedOrderNo, false);
                //alert('Row with orderNo=' + record.OrderNo + ' is unselected.');
            });
        }


</script>
<div class="row">
    <div class="page-title">
        <div class="title_left">
            <h3>Transaction</h3>
        </div>
        <div class="title_right">
            <div class="col-md-5 col-sm-5 col-xs-12 form-group pull-right top_search">

            </div>
        </div>
    </div>

    <div class="clearfix"></div>

    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="x_panel">
                <div class="x_title">
                    <h2>Update Bill Date</h2>
                    <ul class="nav navbar-right panel_toolbox">
                        <li>
                            <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                        </li>

                    </ul>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content">
                    <br />
                    <form id="DispatchOrderForm" method="post" name="DispatchOrderForm" onsubmit="false" data-parsley-validate class="validateForm form-horizontal form-label-left">
                        @Html.HiddenFor(m => m.BillList, new { id = "BillList", name = "BillList" })
                        
                        
                        <div class="row" style="margin-top:1%">
                            <div class="col-lg-8">
                                <div class="col-lg-6">

                                    <label class="control-label col-lg-4 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                        From Date @*<span class="required">*</span>*@
                                    </label>
                                    <div class="col-lg-7 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;">
                                        @Html.TextBoxFor(m => m.InternalBillNo, new { name = "StartDate", id = "StartDate", tabindex = "1", @class = "form-control col-md-7 col-xs-12" })
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <label class="control-label col-lg-4 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                        To Date @*<span class="required">*</span>*@
                                    </label>
                                    <div class="col-lg-8 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;padding-right:0px">
                                        @Html.TextBoxFor(m => m.StrBillDate, new { name = "EndDate", id = "EndDate", tabindex = "2", @class = "form-control col-md-7 col-xs-12" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div id="IsDateDiv">
                                    <label>
                                        <input type="checkbox" id="IsDateFilter" name="IsDateFilter" class="flat" tabindex="0" />  </label>
                                </div>
                            </div>
                        </div>

                        <div class="row" style="margin-top:1%">                           
                            <div class="col-lg-8">
                                <div class="col-lg-8">
                                    <label class="control-label col-lg-3 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                        Enter Party
                                    </label>
                                    <div class="col-lg-7 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;">
                                        @Html.TextBoxFor(m => m.PartyName, new { name = "PartyName", id = "PartyName", tabindex = "5", @class = "form-control col-md-7 col-xs-12" })
                                    </div>
                                    <div id="IsPartyDiv" class="col-lg-2">
                                        <label>
                                            <input type="checkbox" id="IsParty" name="IsParty" class="flat" tabindex="6" /> </label>
                                    </div>
                                </div>

                                <div class="col-lg-4">
                                    <label class="control-label col-lg-5 col-md-3 col-sm-3 col-xs-12" style="padding-left: 0px;" for="category-name">
                                        New Date <span class="required">*</span>
                                    </label>
                                    <div class="col-lg-7 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;padding-right: 0.5%;">
                                       @Html.TextBoxFor(m => m.RecordDate, new { name = "NewDate", id = "NewDate", tabindex = "2",  required = "required", @class = "form-control col-md-7 col-xs-12" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <input type="button" id="btnShowReport" name="btnShowReport" value="Show Report" />
                              </div>
                        </div>

                        
                        <div class="row" style="margin-top:1%">
                            <table class="table bootstrap-datatable" id="grid"></table>
                            <center><span style="display:none" id="noRecord">No Bill Found</span></center>
                        </div>

                        <div class="row" style="margin-top:1%">
                            <div class="col-lg-6 col-lg-offset-3" id="Pending_Save" style="display:none">

                                @*<button class="btn btn-primary" type="reset" onclick="reset()">Reset</button>*@
@if (ViewBag.UserCanAccess == "Edit")
{
                                <button type="submit" id="Dispatch" class="btn btn-success" tabindex="0">Update Bill</button>
                                <button class="btn btn-primary" type="button" id="Cancel" tabindex="0">Cancel</button>
}
                            </div>
                        </div>
                        <table id="gridExport" style="display:none"></table>
                    </form>
                </div>

            </div>
        </div>
    </div>
    <div id="dialogMessage" title="Message">

    </div>
   
</div>

