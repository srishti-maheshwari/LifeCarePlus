@model InventoryManagement.Entity.Common.StockReportModel
@using InventoryManagement.Common
@using InventoryManagement.Entity.Common
@{
    ViewBag.Title = "Stock in Hand";
    Layout = "~/Views/Shared/_Layout.cshtml";
    bool IsSoldByHo = (Session["LoginUser"] as User).IsSoldByHo;
    string CurrentPartyCode = (Session["LoginUser"] as User).PartyCode;
    string CurrentPartyName = (Session["LoginUser"] as User).PartyName;
    // var ProductListJson = ViewBag.ProductJsonList;
}

<style>
    .gj-grid-wrapper {
        min-width: 100% !important;
        overflow-x: scroll !important;
    }
    .ui-widget-header {
        margin-top: -1% !important;
        width: 102% !important;
        margin-left: -1% !important;
    }

    .ui-dialog-titlebar-close {
        margin-right: 1% !important;
    }

    .ui-widget-content {
        background: white !important;
        border-radius: 15px !important;
        -webkit-border-radius: 4px !important;
    }
    /*.ui-widget-header .ui-icon {
        background-color: black!important;
    }*/
    ui-autocomplete-input {
        z-index: 100;
    }
    .input-readonly{
        background-color:#EBEBE4;

    }

</style>
<script type="text/javascript">
    var grid, dialog;
    var StockGrid = [{}];
    var IsBatch = false;
    var tableStockGrid;
    var StockType = "CurrentStock";
    var IsCategory = false;
    var IsProduct = false;
    var IsParty = false;
    var ProductList = [];
    var FullProductList;
    var PartyList = [];
    var FullPartyList;
    var CategoryList = [];
    var FullCategoryList;

    $(document).ready(function () {

        GetAllCategory();
        GetAllProducts(0);
        $(".preloader").hide();
        // FullProductList = ProductListJson;
        var IsAdministrator = '@IsSoldByHo';
        console.log("IsAdministrator", IsAdministrator);
        if (IsAdministrator=="True") {
            GetAllParty();
        }
        else{
            @*$("#PartyName").val('@CurrentPartyName');
            $("#PartyName").prop("readonly", "readonly");*@
            console.log("in else party",'@CurrentPartyCode');
            $("#PartyCode").val('@CurrentPartyCode');
       }



        $("#ProductName").autocomplete({
            source: function (request, response) {
                var results = $.ui.autocomplete.filter(ProductList, request.term);

                response(results.slice(0, 50));
                //response(results);
                //$('html').getNiceScroll().resize();
                //$('#sidebar').getNiceScroll().resize();
                //$('.scroll-panel').getNiceScroll().resize();
                //response(ItemList);
            },
            minLength: 1,
            scroll: true,
            select: function (event, ui) {
                //$("#txDestination").val(ui.item.label);
                //cityID = ui.item.id;
                console.log("ui.item", ui.item.label);
                $("#ProductName").val(ui.item.label);
                SetSpecificCode("Product",ui.item.label);
                return false;
            },

        }).focus(function () {
            $(this).autocomplete("search", "");
        });

        $("#Category").autocomplete({
            source: function (request, response) {
                var results = $.ui.autocomplete.filter(CategoryList, request.term);

                response(results.slice(0, 50));
                //response(results);
                //$('html').getNiceScroll().resize();
                //$('#sidebar').getNiceScroll().resize();
                //$('.scroll-panel').getNiceScroll().resize();
                //response(ItemList);
            },
            minLength: 1,
            scroll: true,
            select: function (event, ui) {
                //$("#txDestination").val(ui.item.label);
                //cityID = ui.item.id;
                console.log("ui.item", ui.item.label);
                $("#Category").val(ui.item.label);

                SetSpecificCode("Category",ui.item.label);
                return false;
            },

        }).focus(function () {
            $(this).autocomplete("search", "");
        });

        $("#PartyName").autocomplete({
            source: function (request, response) {
                var results = $.ui.autocomplete.filter(PartyList, request.term);

                response(results.slice(0, 50));
                //response(results);
                //$('html').getNiceScroll().resize();
                //$('#sidebar').getNiceScroll().resize();
                //$('.scroll-panel').getNiceScroll().resize();
                //response(ItemList);
            },
            minLength: 1,
            scroll: true,
            select: function (event, ui) {
                //$("#txDestination").val(ui.item.label);
                //cityID = ui.item.id;
                console.log("ui.item", ui.item.label);
                $("#PartyName").val(ui.item.label);
                SetSpecificCode("Party",ui.item.label);
                return false;
            },

        }).focus(function () {
            $(this).autocomplete("search", "");
        });


        $('#IsBatchWise').on('ifChecked', function () {
            //console.log("checked");
            IsBatch = true;

        });

        $('#IsCategory').on('ifChecked', function () {
            //console.log("checked");
            IsCategory = true;
            $("#Category").val("All");
            $("#Category").prop("readonly", "readonly");
            $("#CategoryCode").val(0);
            //GetAllProducts(0);
            //$('#IsProduct').trigger('ifChecked');
            //$('#IsProduct').prop('checked', true);
            $("#IsProduct").iCheck('check');

        });
        $('#IsProduct').on('ifChecked', function () {
            //console.log("checked");
            IsProduct = true;
            $("#ProductName").val("All");
            $("#ProductName").prop("readonly", "readonly");
            $("#ProductCode").val(0);
            //GetAllProducts(0);

        });
        $('#IsParty').on('ifChecked', function () {
            //console.log("checked");
            IsParty = true;
            //$("#PartyName").val("All");
            //$("#PartyName").prop("readonly", "readonly");
            //$("#PartyCode").val(0);
            $("#PartyName").val('All');
            $("#PartyName").prop("readonly", "readonly");
            $("#PartyCode").val('0');
        });

        $('#IsParty').on('ifUnchecked', function () {
            //console.log("checked");
            IsParty = false;
            //$("#PartyName").val("");
            //$("#PartyName").prop("readonly", "");
            //$("#PartyCode").val("");
            $("#PartyName").val('');
            $("#PartyName").prop("readonly", "");
            $("#PartyCode").val('');
        });


        $('#IsProduct').on('ifUnchecked', function () {
            //console.log("checked");
            IsProduct = false;
            $("#ProductName").val("");
            $("#ProductName").prop("readonly", "");
            $("#ProductCode").val("");
        });
        $('#IsCategory').on('ifUnchecked', function () {
            //console.log("checked");
            IsCategory = false;
            $("#Category").val("");
            $("#Category").prop("readonly", "");
            $("#CategoryCode").val("");
            GetAllCategory();
        });
        $('#IsBatchWise').on('ifUnchecked', function () {
            //console.log("unchecked"); //Do your code
            IsBatch = false;
        });
        $('#FinishStock').click(function () {
            $(".preloader").show();
            StockType = "FinishStock";
            $("#StockTypeLabel").val("Finish Stock");
            var CategoryCode = $("#CategoryCode").val();
            var ProductCode = $("#ProductCode").val();
            var PartyCode = $("#PartyCode").val();
            console.log("PartyCode", PartyCode);
            if (CategoryCode == "" || CategoryCode == null) {
                CategoryCode = "0";
            }
            if (ProductCode == "" || ProductCode == null) {
                ProductCode = "0";
            }
            GetStockDetails(CategoryCode, ProductCode, PartyCode, IsBatch, StockType);
        });

        $('#CurrentStock').click(function () {
           
            //$(".loader").show();
            $(".preloader").show();
            StockType = "CurrentStock";
            $("#StockTypeLabel").val("Current Stock");
            var CategoryCode = $("#CategoryCode").val();
            var ProductCode = $("#ProductCode").val();
            var PartyCode = $("#PartyCode").val();
            if (CategoryCode == "" || CategoryCode == null) {
                CategoryCode = "0";
            }
            if (ProductCode == "" || ProductCode == null) {
                ProductCode = "0";
            }
            var PartyCode = $("#PartyCode").val();
            console.log("in current stock");
            console.log("CategoryCode", CategoryCode);
            console.log("ProductCode", ProductCode);
            console.log("PartyCode", PartyCode);
            console.log("IsBatchWise", IsBatch);
            console.log("StockType", StockType);
            GetStockDetails(CategoryCode, ProductCode, PartyCode , IsBatch,StockType);
        });






        $("#btnExport").on('click', function () {
            //var tableToExcel = new TableToExcel();
            // tableToExcel.render("grid");
            var UserTypeStr = "StockReport";

            console.log("in export gridExport", StockGrid);
            var tableString = "<thead><tr>";

            if (IsBatch == false) {
                tableString += "<th>S.No.</th>";
                tableString += "<th>Party Code</th>";
                tableString += "<th>Party Name</th>";
                tableString += "<th>Category</th>";
                tableString += "<th>Code</th>";
                tableString += "<th>Product Name</th>";
                tableString += "<th>Batch No.</th>";
                tableString += "<th>Barcode</th>";
                tableString += "<th>Rate/DP</th>";
                tableString += "<th>MRP</th>";
                tableString += "<th>Qty</th>";
                tableString += "<th>Stock Value</th>";
                tableString += "<th>(DP)Stock Value</th>";
                tableString += "<th>(MRP)Stock Value</th>";
                tableString += "</tr></thead><tbody>";
                for (var i = 0; i < StockGrid.length; i++) {
                    tableString += "<tr>";
                    tableString += "<td>" + StockGrid[i].SNo + "</td>";
                    tableString += "<td>" + StockGrid[i].PartyCode + "</td>";
                    tableString += "<td>" + StockGrid[i].PartyName + "</td>";
                    console.log("StockGrid[i].Catgeory", StockGrid[i].Category);
                    tableString += "<td>" + StockGrid[i].Category + "</td>";
                    console.log("StockGrid[i].ProductCode", StockGrid[i].ProductCode);

                    tableString += "<td class=formatText>" + StockGrid[i].ProductCode.toString() + "</td>";
                    tableString += "<td>" + StockGrid[i].ProductName + "</td>";
                    tableString += "<td class=formatText>" + StockGrid[i].BatchNo + "</td>";
                    tableString += "<td class=formatText>" + StockGrid[i].Barcode + "</td>";
                    tableString += "<td>" + StockGrid[i].RateOrDP + "</td>";
                    tableString += "<td>" + StockGrid[i].MRP + "</td>";
                    tableString += "<td>" + StockGrid[i].Qty + "</td>";
                    tableString += "<td>" + StockGrid[i].StockValue + "</td>";
                    tableString += "<td>" + StockGrid[i].DPStockValue + "</td>";
                    tableString += "<td>" + StockGrid[i].MRPSTockValue + "</td>";
                    tableString += "</tr>";
                }
            }
            else{
                tableString += "<th>S.No.</th>";
                tableString += "<th>Party Code</th>";
                tableString += "<th>Party Name</th>";
                tableString += "<th>Category</th>";
                tableString += "<th>Product Code</th>";
                tableString += "<th>Product Name</th>";
                tableString += "<th>BatchNo</th>";
                tableString += "<th>Expired</th>";
                tableString += "<th>Exp. Date</th>";
                tableString += "<th>Mfg. Date</th>";
                tableString += "<th>Batch No.</th>";
                tableString += "<th>Barcode</th>";
                tableString += "<th>Rate/DP</th>";
                tableString += "<th>MRP</th>";
                tableString += "<th>Qty</th>";
                tableString += "<th>Stock Value</th>";
                tableString += "<th>(DP)Stock Value</th>";
                tableString += "<th>(MRP)Stock Value</th>";
                tableString += "</tr></thead><tbody>";
                for (var i = 0; i < StockGrid.length; i++) {
                    tableString += "<tr>";
                    tableString += "<td>"+StockGrid[i].SNo+"</td>";
                    tableString += "<td>"+StockGrid[i].PartyCode+"</td>";
                    tableString += "<td>" + StockGrid[i].PartyName + "</td>";
                    console.log("StockGrid[i].Catgeory", StockGrid[i].Category);
                    tableString += "<td>" + StockGrid[i].Category + "</td>";
                  //  console.log("StockGrid[i].ProductCode.toString()", StockGrid[i].ProductCode.toString());
                    tableString += "<td class=formatText>" + StockGrid[i].ProductCode + "</td>";
                    tableString += "<td>" + StockGrid[i].ProductName + "</td>";

                    tableString += "<td>" + StockGrid[i].Expired + "</td>";
                    tableString += "<td>" + StockGrid[i].ExpDate + "</td>";
                    tableString += "<td>" + StockGrid[i].MfgDate + "</td>";
                    tableString += "<td class=formatText>" + StockGrid[i].BatchNo + "</td>";
                    tableString += "<td class=formatText>" + StockGrid[i].Barcode + "</td>";
                    tableString += "<td>" + StockGrid[i].RateOrDP + "</td>";
                    tableString += "<td>" + StockGrid[i].MRP + "</td>";
                    tableString += "<td>" + StockGrid[i].Qty + "</td>";
                    tableString += "<td>" + StockGrid[i].StockValue + "</td>";
                    tableString += "<td>" + StockGrid[i].DPStockValue + "</td>";
                    tableString += "<td>" + StockGrid[i].MRPSTockValue + "</td>";
                    tableString += "</tr>";
                }

                }

                tableString += "</tbody>";
                $("#gridExport").empty();
                $("#gridExport").append(tableString);
                tableToExcel('gridExport', UserTypeStr + "_Export");


                //$('<table>').append(table.$('tr').clone()).table2excel({
                //    //    exclude: ".noExl",
                //    //    name: UserTypeStr + "_Export",
                //    //    filename: UserTypeStr + "_Export",
                //    //    fileext: ".xls",
                //});
            //$("#grid").table2excel({
            //    exclude: ".noExl",
            //    name: UserTypeStr + "_Export",
            //    filename: UserTypeStr + "_Export",
            //    fileext: ".xls",
            //});
            });

    });

    function SetSpecificCode(type, label) {
        if (type == "Product") {
            for (var i = 0; i < FullProductList.length; i++) {
                if (FullProductList[i].ProductName == label) {
                    $("#ProductCode").val(parseFloat(FullProductList[i].ProductCodeStr));
                    break;
                }
            }
        }
        if (type == "Category") {
            for (var i = 0; i < FullCategoryList.length; i++) {
                if (FullCategoryList[i].CategoryName == label) {
                    $("#CategoryCode").val(FullCategoryList[i].CategoryId);
                    GetAllProducts(FullCategoryList[i].CategoryId);
                    break;
                }
            }
        }
        if (type == "Party") {
            for (var i = 0; i < FullPartyList.length; i++) {
                if (FullPartyList[i].PartyName == label) {
                    $("#PartyCode").val(FullPartyList[i].PartyCode);
                    break;
                }
            }
        }
    }

    function GetAllProducts(catId) {
        //console.log("FullProductList", FullProductList);
        //if (FullProductList != null && FullProductList != undefined && FullProductList != "") {
        //    ProductList = [];
        //    var i = 0;
        //    if (catId == 0) {
        //        for (i = 0; i < FullProductList.length; i++) {
        //            //console.log("data[i]", data[i]);
        //            ProductList.push(FullProductList[i].ProductName);
        //        }
        //    }
        //    else {
        //        for (i = 0; i < FullProductList.length; i++) {
        //            //console.log("data[i]", data[i]);
        //            if (FullProductList[i].CategoryId == parseInt(catId)) {
        //                ProductList.push(FullProductList[i].ProductName);
        //            }
        //        }
        //    }
        //}
        $.ajax({
            url: '/Report/GetAllProduct',
            dataType: "json",
            method: 'POST',
            async: false,
            data: { 'CategoryCode': catId },
            success: function (data) {
                console.log("data:", data);
                //response(data);
                FullProductList = data;
                ProductList = [];
                if (data != null) {
                    var i = 0;
                    for (i = 0; i < data.length; i++) {
                        //console.log("data[i]", data[i]);
                        ProductList.push(data[i].ProductName);
                    }
                }
            },
            error: function (xhr, status, error) {
                console.log("xhr.responseText:", xhr.responseText);
                //var responseText = jQuery.parseJSON(xhr.responseText);
                //console.log("responseText.ExceptionType:", responseText.ExceptionType);
                //console.log("responseText.Message:", responseText.Message);
            }
        });
    }


    function GetAllParty() {
        $.ajax({
            url: '/Report/GetAllPartyListForReports',
            dataType: 'JSON',
            method: 'GET',
            //data: { 'LedgerName': '' },
            success: function (data) {
                console.log("data:", data);
                //response(data);
                FullPartyList = data;
                PartyList = [];
                if (data != null) {
                    var i = 0;
                    for (i = 0; i < data.length; i++) {
                        //console.log("data[i]", data[i]);
                        PartyList.push(data[i].PartyName);
                    }
                }
            },
            error: function (error) {
                console.log(error);
            }
        });
    }
    function GetAllCategory() {
        $.ajax({
            url: '/Report/GetAllCategory',
            dataType: 'JSON',
            method: 'GET',
            async: false,
            //data: { 'LedgerName': '' },
            success: function (data) {
                console.log("data:", data);
                //response(data);
                FullCategoryList = data;
                CategoryList = [];
                if (data != null) {
                    var i = 0;
                    for (i = 0; i < data.length; i++) {
                        //console.log("data[i]", data[i]);
                        CategoryList.push(data[i].CategoryName);
                    }
                }
            },
            error: function (error) {
                console.log(error);
            }
        });
    }

    function OpenDialog(dialogId, Message, isConfirmation) {
        $("#" + dialogId).empty();
        $("#" + dialogId).append('<p>' + Message + '</p>');
        if (isConfirmation == "true") {
            $("#" + dialogId).dialog({
                modal: true,
                buttons: [{
                    text: "Yes",
                    id: "btnYes" + dialogId,
                    click: function () {
                        //var isOpen = $("#dialog").dialog("isOpen");
                        //if (isOpen == true) {
                        //    okCallBack();
                        //}
                        IsYes = true;
                        $("#" + dialogId).dialog("close");


                    }
                },
                {
                    text: "No",
                    id: "btnNo" + dialogId,
                    click: function () {
                        //var isOpen = $("#dialog").dialog("isOpen");
                        //if (isOpen == true) {
                        //    okCallBack();
                        //}
                        IsYes = false;
                        $("#" + dialogId).dialog("close");
                    }
                }
                ]
            });
            $(".ui-dialog-titlebar-close").empty();
            $(".ui-dialog-titlebar-close").append('<i class="fa fa-close"></i>');
        }
        else {


            $("#" + dialogId).dialog({
                modal: true,
                buttons: [{
                    text: "OK",
                    id: "btn" + dialogId,
                    click: function () {
                        //var isOpen = $("#dialog").dialog("isOpen");
                        //if (isOpen == true) {
                        //    okCallBack();
                        //}

                        $("#" + dialogId).dialog("close");


                    }
                }]
            });
            $(".ui-dialog-titlebar-close").empty();
            $(".ui-dialog-titlebar-close").append('<i class="fa fa-close"></i>');
        }

    }
    function fillGrid() {
        console.log("StockGrid", StockGrid);

               // StockGrid = StockGrid.splice(1);

        $("#noRecord").hide();
        //console.log("ProductGrid", ProductGrid);
        if (grid != null) {
            grid.destroy();
            $('#grid').empty();

        }
        console.log("IsBatch", IsBatch);
        if (IsBatch == false) {
            grid = $('#grid').grid({
                dataSource: StockGrid,
                uiLibrary: 'bootstrap',
                headerFilter: true,
                columns: [
                    { field: 'SNo', title: 'S.No.',width:80, sortable: true, hidden: false, filterable: false },
                     { field: 'PartyCode', width:100, title: 'Party Code', sortable: true, hidden: false, filterable: true },
                      { field: 'PartyName', width: 150, title: 'Party Name', sortable: true, hidden: false, filterable: true },
                       { field: 'Category', width: 100, title: 'Category', sortable: true, hidden: false, filterable: true },
                        { field: 'ProductCode', width: 80, title: 'Code', sortable: true, hidden: false, filterable: true },
                         { field: 'ProductName', width: 150, title: 'Product Name', sortable: true, hidden: false, filterable: true },
                         { field: 'BatchNo', width: 100, title: 'Batch No.', sortable: true, hidden: false, filterable: true },
                         { field: 'Barcode', width: 100, title: 'Barcode', sortable: true, hidden: false, filterable: true },
                          { field: 'RateOrDP', width: 80, title: 'Rate/DP', sortable: true, hidden: false, filterable: true },
                           { field: 'MRP', title: 'MRP', width: 80, sortable: true, hidden: false, filterable: true },
                            { field: 'Qty', width: 80, title: 'Qty', sortable: true, hidden: false, filterable: true },
                             //{ field: 'StockValue', title: 'Stock Value',sortable: true, hidden: false, filterable: true },
                              { field: 'DPStockValue', width: 80, title: '(DP)Stock Value', sortable: true, hidden: false, filterable: true },
                               { field: 'MRPSTockValue', width: 80, title: '(MRP)Stock Value', sortable: true, hidden: false, filterable: true },
                ],
                pager: { limit: 20, sizes: [15, 20, 35, 50, 65, 80, 95, 100] }
            });

        }
        else {
            grid = $('#grid').grid({
                dataSource: StockGrid,
                uiLibrary: 'bootstrap',
                headerFilter: true,
                columns: [
                    { field: 'SNo',width:80, title: 'S.No.', sortable: true, hidden: false, filterable: true },

                     { field: 'PartyCode', width: 100, title: 'Party Code', sortable: true, hidden: false, filterable: true },
                      { field: 'PartyName', width: 150, title: 'Party Name', sortable: true, hidden: false, filterable: true },
                       { field: 'Category', width: 100, title: 'Category', sortable: true, hidden: false, filterable: true },
                        { field: 'ProductCode', width: 80, title: 'Code', sortable: true, hidden: false, filterable: true },
                         { field: 'ProductName', width: 150, title: 'Product Name', sortable: true, hidden: false, filterable: true },
                          //{ field: 'BatchNo', title: 'Batch No.', sortable: true, hidden: false, filterable: true },
                               { field: 'Expired', width: 80, title: 'Expired', sortable: true, hidden: false, filterable: true },
                               { field: 'ExpDate', width: 100, title: 'Exp. Date', sortable: true, hidden: false, filterable: true },
                               { field: 'MfgDate', width: 100, title: 'Mfg. Date', sortable: true, hidden: false, filterable: true },
                               { field: 'BatchNo', width: 100, title: 'Batch No.', sortable: true, hidden: false, filterable: true },
                         { field: 'Barcode', width: 100, title: 'Barcode', sortable: true, hidden: false, filterable: true },
                          { field: 'RateOrDP', width: 80, title: 'Rate/DP', sortable: true, hidden: false, filterable: true },
                           { field: 'MRP', width: 80, title: 'MRP', sortable: true, hidden: false, filterable: true },
                            { field: 'Qty', width: 80, title: 'Qty', sortable: true, hidden: false, filterable: true },
                             //{ field: 'StockValue', title: 'Stock Value', sortable: true, hidden: false, filterable: true },
                              { field: 'DPStockValue', width: 80, title: '(DP)Stock Value', sortable: true, hidden: false, filterable: true },
                               { field: 'MRPSTockValue', width: 80, title: '(MRP)STock Value', sortable: true, hidden: false, filterable: true },
                ],
                pager: { limit: 20, sizes: [15, 20, 35, 50, 65, 80, 95, 100] }
            });


        }
        $(".loader").hide();
    }

    function GetStockDetails(CategoryCode, ProductCode, PartyCode, IsBatchWise, StockType) {
        debugger;
        if (CategoryCode == "" || CategoryCode == null || ProductCode == "" || ProductCode==null) {
            if (CategoryCode == "") {
                CategoryCode = 0;
                // OpenDialog("dialogMessage", "Please enter category!", "false");
            }
            if (ProductCode == "") {
                ProductCode = 0;
                // OpenDialog("dialogMessage", "Please enter product!", "false");
                //else
                //    OpenDialog("dialogMessage", "Please enter party!", "false");
            }
        }

            $.ajax({
                url: '@Url.Action("GetStockReport", "Report")',
                type: 'POST',
                data: { "CategoryCode": CategoryCode, "ProductCode": ProductCode, "PartyCode": PartyCode, "IsBatchWise": IsBatchWise, "StockType": StockType},

                dataType: "json",
                success: function (objResult) {
                    StockGrid = [{}];
                    if (objResult.length > 0) {
                        var totalDpVal = 0;
                        var totalMrpVal = 0;
                        StockGrid = StockGrid.splice(1);
                        for (var i = 0; i < objResult.length; i++) {
                            totalDpVal = totalDpVal + parseFloat (objResult[i].DPStockValue);
                            totalMrpVal = totalMrpVal + parseFloat (objResult[i].MRPSTockValue);
                            if (objResult[i].ExpDate != "") {
                                var dateObj = new Date(objResult[i].ExpDateD.match(/\d+/)[0] * 1);
                                var ExpD = (dateObj.getDate()) + "/" + (dateObj.getMonth() + 1) + "/" + dateObj.getFullYear();
                                dateObj = new Date(objResult[i].MfgDateD.match(/\d+/)[0] * 1);
                                var MfgD = (dateObj.getDate()) + "/" + (dateObj.getMonth() + 1) + "/" + dateObj.getFullYear();

                                StockGrid.push({ "SNo": i + 1, "PartyCode": objResult[i].PartyCode, "PartyName": objResult[i].PartyName, "Category": objResult[i].Category, "ProductCode": objResult[i].ProductCode, "ProductName": objResult[i].ProductName, "RateOrDP": objResult[i].RateOrDP, "MRP": objResult[i].MRP, "Qty": objResult[i].Qty, "StockValue": objResult[i].StockValue, "DPStockValue": objResult[i].DPStockValue, "MRPSTockValue": objResult[i].MRPSTockValue, "BatchNo": objResult[i].BatchNo, "Barcode": objResult[i].Barcode, "Expired": objResult[i].Expired, "ExpDate": ExpD, "MfgDate": MfgD });
                            }
                            else {
                                StockGrid.push({ "SNo": i + 1, "PartyCode": objResult[i].PartyCode, "PartyName": objResult[i].PartyName, "Category": objResult[i].Category, "ProductCode": objResult[i].ProductCode, "ProductName": objResult[i].ProductName, "RateOrDP": objResult[i].RateOrDP, "MRP": objResult[i].MRP, "Qty": objResult[i].Qty, "StockValue": objResult[i].StockValue, "DPStockValue": objResult[i].DPStockValue, "MRPSTockValue": objResult[i].MRPSTockValue, "BatchNo": objResult[i].BatchNo, "Barcode": objResult[i].Barcode, "Expired": objResult[i].Expired, "ExpDate": objResult[i].ExpDate, "MfgDate": objResult[i].MfgDate });
                            }

                        }
                        tableStockGrid = StockGrid;
                        $("#dpval").text(totalDpVal);
                        $("#mrpval").text(totalMrpVal);

                        $("#noRecord").hide();

                    }
                    else {

                        $("#noRecord").show();
                    }
                    fillGrid();
                    $(".preloader").hide();

                },
                error: function (xhr, data) {
                    //  return false;
                    console.log(xhr);
                    console.log("Error:", data);
                }
            });



    }
</script>

<div class="row">
    <div class="page-title">
        <div class="title_left">
            <h3>Report</h3>
        </div>
        <div class="title_right">
            <div class="col-md-5 col-sm-5 col-xs-12 form-group pull-right top_search">

            </div>
        </div>
    </div>

    <div class="clearfix"></div>

    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="x_panel">
                <div class="x_title">
                    <h2>Stock in Hand</h2>
                    <ul class="nav navbar-right panel_toolbox">
                        <li>
                            <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                        </li>

                    </ul>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content">
                    <br />
                    <form id="distributorForm" method="post" name="distributorForm" onsubmit="false" data-parsley-validate class="validateForm form-horizontal form-label-left">
                    @Html.HiddenFor(m => m.PartyCode,new {id="PartyCode",name="PartyCode" })
                        @Html.HiddenFor(m => m.CategoryCode, new { id = "CategoryCode", name = "CategoryCode" })
                    @Html.HiddenFor(m => m.ProductCode, new { id = "ProductCode", name = "ProductCode" })
                        <div class="col-lg-12">
                            <div class="col-lg-8">
                                <div class="form-group">
                                    <label class="control-label col-lg-6 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                        Enter Category @*<span class="required">*</span>*@
                                    </label>
                                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;">
                                       
                                        @Html.TextBoxFor(m => m.Category, new { name = "Category", id = "Category", tabindex = "1", @class = "form-control col-md-7 col-xs-12" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="form-group">
                                    <div id="IsCategoryDiv">
                                        <label>
                                            <input type="checkbox" id="IsCategory" name="IsCategory" class="flat" tabindex="2" />
                                           
                                          
                                        </label>

                                    </div>
                                </div>
                            </div>
                            </div>
                        <div class="col-lg-12">
                            <div class="col-lg-8">
                                <div class="form-group">
                                    <label class="control-label col-lg-6 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                        Enter Product @*<span class="required">*</span>*@
                                    </label>
                                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;">

                                        @Html.TextBoxFor(m => m.ProductName, new { name = "ProductName", id = "ProductName", tabindex = "3", @class = "form-control col-md-7 col-xs-12" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="form-group">
                                    <div id="IsProductDiv">
                                        <label>
                                            <input type="checkbox" id="IsProduct" name="IsProduct" class="flat" tabindex="4" />


                                        </label>

                                    </div>
                                </div>
                            </div>
                        </div>
                        @if (IsSoldByHo)
                        {
                        <div class="col-lg-12">
                            <div class="col-lg-8">
                                <div class="form-group">
                                    <label class="control-label col-lg-6 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                        Enter Party 
                                    </label>
                                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;">

                                        @Html.TextBoxFor(m => m.PartyName, new { name = "PartyName", id = "PartyName", tabindex = "5", @class = "form-control col-md-7 col-xs-12" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="form-group">
                                    <div id="IsPartyDiv">
                                        <label>
                                            <input type="checkbox" id="IsParty" name="IsParty" class="flat" tabindex="6" />


                                        </label>

                                    </div>
                                </div>
                            </div>
                        </div>
                        }
                        <div class="col-lg-12">
                           <div class="col-lg-8">
                                <div class="form-group">
                                    <label class="control-label col-lg-6 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                        Print Type @*<span class="required">*</span>*@
                                    </label>
                                    <div id="IsBatchDiv">
                                        <label>
                                            @Html.CheckBoxFor(m => m.IsBatchWise, new { name = "IsBatchWise", id = "IsBatchWise", @class = "flat", tabindex = "7"})&nbsp; Batch Wise &nbsp;

                                        </label>
                                        <a style="cursor:pointer;color:blue;text-decoration:underline" id="FinishStock">Finish Stock</a>
                                        <span><b>|</b></span>
                                        <a style="cursor:pointer;color:blue;text-decoration:underline" id="CurrentStock">Current Stock</a>
                                    </div>
                                   

                                </div>
                            </div>
                            <div class="col-lg-4" id="btnExport">
                                <img src="~/images/ExcelImage.jpg" style="height: 25px;width: 8%;cursor:pointer" />
                            </div>
                            </div>
                            <div class="col-lg-12">
                                <br />
                                <div>
                                    <b><span id="StockTypeLabel"></span></b>
                                </div>
                              <div style="float:right">DP Value:<label id="dpval"></label>
                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MRP Value:<label id="mrpval"></label>&nbsp;</div>
                                <div class="form-group">
                                    <br />@*<br /><br /><center><div class="loader" style="display:none"></div></center>*@
                                        <table class="table bootstrap-datatable" id="grid"></table>
                                        <center><span style="display:none" id="noRecord">No Stock Found</span></center>
                                   
                                </div>
                            </div>
                              
                           
                       <table id="gridExport" style="display:none"></table>
                    </form>
                </div>

            </div>
        </div>
    </div>
    <div id="dialogMessage" title="Message">

    </div>

</div>
