@model InventoryManagement.Entity.Common.SalesReport
@using InventoryManagement.Common
@using InventoryManagement.Entity.Common
@{
    ViewBag.Title = "SalesReport";
    Layout = "~/Views/Shared/_Layout.cshtml";
    bool IsSoldByHo = (Session["LoginUser"] as User).IsSoldByHo;
    string CurrentPartyCode = (Session["LoginUser"] as User).PartyCode;
    string CurrentPartyName = (Session["LoginUser"] as User).PartyName;
    string BVCaption = Session["BVCaption"].ToString();
    ConnModel objCon = (System.Web.HttpContext.Current.Session["ConModel"] as ConnModel);
}

<style>
    .ui-widget-header {
        margin-top: -1% !important;
        width: 102% !important;
        margin-left: -1% !important;
    }
     .gj-grid-wrapper {
        min-width: 100% !important;
        overflow-x: scroll !important;
    }
    .ui-dialog-titlebar-close {
        margin-right: 1% !important;
    }

    .ui-widget-content {
        background: white !important;
        border-radius: 15px !important;
        -webkit-border-radius: 4px !important;
    }
    /*.ui-widget-header .ui-icon {
        background-color: black!important;
    }*/
    ui-autocomplete-input {
        z-index: 100;
    }

    .input-readonly {
        background-color: #EBEBE4;
    }
</style>
<script type="text/javascript">
    var grid, dialog;
    var IsYes = false;
    var BillWiseGrid = [{}];
    var PreviouslySelectedFromDate = "";
    var PreviouslySelectedToDate = "";
    var PreviouslySelectedToPickerDate = "";
    var PreviouslySelectedFromPickerDate = "";
    var SalesType = "BillWise";
    var IsCustomerFilter = false;
    var IsDateFilter = false;
    var FromDate = "", ToDate = "";
    var CustomerId = "";
    var IsParty = false;
    var PartyList = [];
    var FullPartyList;
    var BVCaption = "";
    $(document).ready(function () {
        var IsAdministrator = '@IsSoldByHo';
        BVCaption = '@BVCaption';
        if (IsAdministrator == "True") {
            GetAllParty();
        }
        else {
            @*$("#PartyName").val('@CurrentPartyName');
            $("#PartyName").prop("readonly", "readonly");*@
            $("#PartyCode").val('@CurrentPartyCode');
        }
        $(".preloader").hide();
        $("#hiddenInvoiceType").val("");
        $("#OfferUID").change(function(){
            var IsOffer = $("#OfferUID").val();
        });

        $("#InvoiceType").change(function () {
            var SelectedVal = $("#InvoiceType").val();
            $("#hiddenInvoiceType").val(SelectedVal);
        });
        $('#CustCode').focusout(function () {
            //console.log("checked");
            //var FromDate = $('#StartDate').val();
            //var ToDate = $('#EndDate').val();
            CustomerId = $('#CustCode').val();
            @*FromDate=$("#StartDate").val();
            ToDate=$("#EndDate").val();
            if (FromDate == "" || FromDate == null) {
                //  OpenDialog("dialogMessage", "Invalid From Date!", "false");
                FromDate = "All";
            }
            if (ToDate == "" || ToDate == null) {
                ToDate == "All";
             //   OpenDialog("dialogMessage", "Invalid To Date!", "false");
            }


            GetSalesDetails(FromDate, ToDate, CustomerId, '@CurrentPartyCode', "S");*@



        });
        @*$('#StartDate').focusout(function () {
            //console.log("checked");
            var FromDate = $('#StartDate').val();
            var ToDate = $('#EndDate').val();
            CustomerId = $('#CustCode').val();
            GetSalesDetails(FromDate, ToDate, CustomerId, '@CurrentPartyCode', "S");



        });
        $('#EndDate').focusout(function () {
            //console.log("checked");

            var FromDate = $('#StartDate').val();
            var ToDate = $('#EndDate').val();
            CustomerId = $('#CustCode').val();
            GetSalesDetails(FromDate, ToDate, CustomerId, '@CurrentPartyCode', "S");



        });*@
        $('#IsCustomerFilter').on('ifChecked', function () {
            //console.log("checked");
            IsCustomerFilter = true;
            $("#CustCode").val("All");
            $("#CustCode").prop("readonly", "readonly");
            CustomerId = $('#CustCode').val();
            // GetSalesDetails($("#StartDate").val(), $("#EndDate").val(), CustomerId, '@CurrentPartyCode', "S");

        });
        $('#IsCustomerFilter').on('ifUnchecked', function () {
            //console.log("checked");
            IsCustomerFilter = false;
            $("#CustCode").val("");
            $("#CustCode").prop("readonly", "");
            CustomerId = "";

        });
        $('#IsDateFilter').on('ifChecked', function () {
            //console.log("checked");
            IsDateFilter = true;
            $("#StartDate").val("All");
            $("#StartDate").prop("readonly", "readonly");
            FromDate = "";
            ToDate = "";
            $("#EndDate").val("All");
            $("#EndDate").prop("readonly", "readonly");
            //var CustomerId = $('#CustCode').val();
            // GetSalesDetails($("#StartDate").val(), $("#EndDate").val(), CustomerId, '@CurrentPartyCode', "S");
        });
        $('#IsDateFilter').on('ifUnchecked', function () {
            //console.log("checked");
            IsDateFilter = false;
            $("#StartDate").val("");
            $("#StartDate").prop("readonly", "");
            $("#EndDate").val("");
            $("#EndDate").prop("readonly", "");
            FromDate = "";
            ToDate = "";
        });

        $("#StartDate").datetimepicker({


            format: 'DD-MMM-YYYY'
            ,
            // todayHighlight:true,
            widgetPositioning: {
                horizontal: 'auto',
                vertical: 'bottom'
            }

        });
        $("#EndDate").datetimepicker({


            format: 'DD-MMM-YYYY'
            ,
            // todayHighlight:true,
            widgetPositioning: {
                horizontal: 'auto',
                vertical: 'bottom'
            }

        });

        $("#btnExport").on('click', function () {
            //var tableToExcel = new TableToExcel();
            // tableToExcel.render("grid");
            var UserTypeStr = "BillWiseSalesReport";

            //$("#grid").table2excel({
            //    exclude: ".noExl",
            //    name: UserTypeStr + "_Export",
            //    filename: UserTypeStr + "_Export",
            //    fileext: ".xls",
            //});
            console.log("in export gridExport", BillWiseGrid);
            var tableString = "<thead><tr>";
            tableString += "<th>S.No.</th>";
            tableString += "<th>Bill No.</th>";
            tableString += "<th>Bill Date</th>";
            tableString += "<th>Party Code</th>";
            tableString += "<th>Party Name</th>";
            tableString += "<th>Cust. Code</th>";
            tableString += "<th>Cust. Name</th>";
            if ('@objCon.CompID' == "1007")
            {
                tableString += "<th>Mobile No</th>";
            }
                tableString += "<th>" + BVCaption + " Value</th>";
                tableString += "<th>Amount</th>";
                tableString += "<th>IGST Amount</th>";
                tableString += "<th>CGST Amount</th>";
                tableString += "<th>SGST Amount</th>";
                tableString += "<th>Net Amount</th>";
                tableString += "<th>Offer Name</th>";

                tableString += "</tr></thead><tbody>";
                for (var i = 0; i < BillWiseGrid.length; i++) {
                    tableString += "<tr>";
                    tableString += "<td>" + BillWiseGrid[i].SNo + "</td>";
                    tableString += "<td>" + BillWiseGrid[i].BillNo + "</td>";
                    tableString += "<td>" + BillWiseGrid[i].BillDate + "</td>";
                    tableString += "<td>" + BillWiseGrid[i].PartyCode + "</td>";
                    tableString += "<td>" + BillWiseGrid[i].PartyName + "</td>";
                    tableString += "<td>" + BillWiseGrid[i].Code + "</td>";
                    tableString += "<td>" + BillWiseGrid[i].Name + "</td>";
                    if ('@objCon.CompID' == "1007")
                    {
                        tableString += "<td>" + BillWiseGrid[i].Mobile + "</td>";
                    }
                    tableString += "<td>" + BillWiseGrid[i].BVValue + "</td>";
                    tableString += "<td>" + BillWiseGrid[i].Amount + "</td>";
                    tableString += "<td>" + BillWiseGrid[i].IGSTAmount + "</td>";
                    tableString += "<td>" + BillWiseGrid[i].CGSTAmount + "</td>";
                    tableString += "<td>" + BillWiseGrid[i].SGSTAmount + "</td>";
                    tableString += "<td>" + BillWiseGrid[i].NetAmount + "</td>";
                    tableString += "<td>" + BillWiseGrid[i].OfferName + "</td>";
                    tableString += "</tr>";
                }

                tableString += "</tbody>";
            $("#gridExport").empty();
            $("#gridExport").append(tableString);
                tableToExcel('gridExport', UserTypeStr + "_Export");

            });
        $("#btnShowReport").on('click', function () {
            $(".preloader").show();
            var PartyCode = $("#PartyCode").val();
            var FType = $("#FType").val();
            var OfferUID = $("#OfferUID").val();
            var DateError = false;
            FromDate = $("#StartDate").val();
            ToDate = $("#EndDate").val();
            if (FromDate != "" && FromDate != null && ToDate != null && ToDate != "") {
                var d1 = toDate(FromDate);
                var d2 = toDate(ToDate);
                if (d1 > d2) {
                    DateError = true;
                    $(".preloader").hide();
                    OpenDialog("dialogMessage", "From Date should be less than ToDate!", "false");
                }
                else {
                    DateError = false;
                }
            }
            else {
                DateError = false;

                if (IsDateFilter == false) {

                }
                if (FromDate == "" || FromDate == null) {
                    FromDate = "All";
                    //OpenDialog("dialogMessage", "Please enter from date!", "false");
                } if (ToDate == "" || ToDate == null) {
                    ToDate = "All";
                    // OpenDialog("dialogMessage", "Please enter to date!", "false");
                }
            }
            if (CustomerId == "" || CustomerId == null) {
                CustomerId = "All";
                //OpenDialog("dialogMessage", "Please enter IdNo!", "false");
            }

            if (DateError == false) {

                $("#lblTotalBV").text("0");
                $("#lblTotalAmt").text("0");
                $("#lblNetAmt").text("0");
                console.log("FromDate", FromDate);
                console.log("ToDate", ToDate);
                var InvoiceTypeVal = $("#hiddenInvoiceType").val();

                $.ajax({
                    url: '@Url.Action("GetSalesReport", "Report")',
                    type: 'POST',
                    data: { "FromDate": FromDate, "ToDate": ToDate, "CustomerId": CustomerId, "ProductCode": "", "CategoryCode": "", "PartyCode": PartyCode, "BType": "T", "SalesType": SalesType, "InvoiceType": InvoiceTypeVal, "FType": FType, "OfferUID": OfferUID },

                    dataType: "json",
                    success: function (objResult) {
                        BillWiseGrid = [{}];
                        console.log("objResult", objResult);

                        var totalBV = 0;
                        var totalAmt = 0;
                        var netAmt = 0;
                        if (objResult.length > 0) {

                            BillWiseGrid = BillWiseGrid.splice(1);
                            for (var i = 0; i < objResult.length; i++) {
                                var dateObj = new Date(objResult[i].BillDate.match(/\d+/)[0] * 1);
                                var myDate = (dateObj.getDate()) + "/" + (dateObj.getMonth() + 1) + "/" + dateObj.getFullYear();
                                var InvoicePath = '@Url.Action("InvoicePrint", "Transaction", new { Pm = "-1" })';
                                var encodedparameters = objResult[i].BillNo;
                                var EncryptedB64Url = window.btoa(encodedparameters);
                                InvoicePath = InvoicePath.replace("-1", EncryptedB64Url);
                                var TaxAmount = objResult[i].IGSTAmount + objResult[i].CGSTAmount + objResult[i].SGSTAmount;

                                if ('@ViewBag.DirectView' != null && '@ViewBag.DirectView' != "" && '@ViewBag.SoldByParty' == "NotAdmin") {

                                        if (objResult[i].PartyCode != "WR") {
                                            totalBV = totalBV + parseFloat(objResult[i].TotalBV);
                                            totalAmt = totalAmt + parseFloat(objResult[i].Amount);
                                            netAmt = netAmt + parseFloat(objResult[i].NetAmount);
                                            BillWiseGrid.push({ "Mobile": objResult[i].MobileNO, "InvoicePath": InvoicePath, "SNo": i + 1, "BillNo": objResult[i].BillNo, "BillDate": objResult[i].StrBillDate, "PartyCode": objResult[i].PartyCode, "PartyName": objResult[i].PartyName, "Code": objResult[i].CustCode, "Name": objResult[i].CustName, "BVValue": objResult[i].TotalBV, "Amount": objResult[i].Amount, "TaxAmount": TaxAmount, "IGSTAmount": objResult[i].IGSTAmount, "CGSTAmount": objResult[i].CGSTAmount, "SGSTAmount": objResult[i].SGSTAmount, "NetAmount": objResult[i].NetAmount, "OfferName": objResult[i].OfferName });
                                        }

                                }
                                else {
                                    totalBV = totalBV + parseFloat(objResult[i].TotalBV);
                                    totalAmt = totalAmt + parseFloat(objResult[i].Amount);
                                    netAmt = netAmt + parseFloat(objResult[i].NetAmount);
                                    BillWiseGrid.push({ "Mobile": objResult[i].MobileNO, "InvoicePath": InvoicePath, "SNo": i + 1, "BillNo": objResult[i].BillNo, "BillDate": objResult[i].StrBillDate, "PartyCode": objResult[i].PartyCode, "PartyName": objResult[i].PartyName, "Code": objResult[i].CustCode, "Name": objResult[i].CustName, "BVValue": objResult[i].TotalBV, "Amount": objResult[i].Amount, "TaxAmount": TaxAmount, "IGSTAmount": objResult[i].IGSTAmount, "CGSTAmount": objResult[i].CGSTAmount, "SGSTAmount": objResult[i].SGSTAmount, "NetAmount": objResult[i].NetAmount, "OfferName": objResult[i].OfferName });
                                }
                            }
                            $("#lblTotalBV").text(totalBV.toFixed(2));
                            $("#lblTotalAmt").text(totalAmt.toFixed(2));
                            $("#lblNetAmt").text(netAmt.toFixed(2));
                        }

                        fillGrid();

                        $(".preloader").hide();
                    },
                    error: function (xhr, data) {
                        //  return false;
                        console.log(xhr);
                        console.log("Error:", data);
                    }
                });
            }
        });

        var partyselect = $("#PartyName").autocomplete({
            source: function (request, response) {
                var results = $.ui.autocomplete.filter(PartyList, request.term);

                response(results.slice(0, 50));

            },
            minLength: 1,
            scroll: true,
            select: function (event, ui) {
                //$("#txDestination").val(ui.item.label);
                //cityID = ui.item.id;
                console.log("ui.item", ui.item.label);
                $("#PartyName").val(ui.item.label);
                SetSpecificCode("Party", ui.item.label);
                return false;
            },

        }).focus(function () {
            $(this).autocomplete("search", "");
        });

        $('#IsParty').on('ifChecked', function () {
            //console.log("checked");
            IsParty = true;
            //$("#PartyName").val("All");
            //$("#PartyName").prop("readonly", "readonly");
            //$("#PartyCode").val(0);
            $("#PartyName").val('All');
            $("#PartyName").prop("readonly", "readonly");
            $("#PartyCode").val('0');
        });

        $('#IsParty').on('ifUnchecked', function () {
            //console.log("checked");
            IsParty = false;
            //$("#PartyName").val("");
            //$("#PartyName").prop("readonly", "");
            //$("#PartyCode").val("");
            $("#PartyName").val('');
            $("#PartyName").prop("readonly", "");
            $("#PartyCode").val('');
        });

        if ('@ViewBag.DirectView' != null && '@ViewBag.DirectView' != "") {
            $('#IsCustomerFilter').iCheck('check');

            var currDate = new Date();
            var selectedDate = currDate;
            var newFromDate = "";
            var newToDate = "";

            if ('@ViewBag.DirectView' == 'D') {

                newFromDate = selectedDate.getDate() + "-" + (selectedDate.getMonth() + 1) + "-" + selectedDate.getFullYear();
                newToDate = selectedDate.getDate() + "-" + (selectedDate.getMonth() + 1) + "-" + selectedDate.getFullYear();
            }
            else {
                newFromDate = "01" + "-" + (selectedDate.getMonth() + 1) + "-" + selectedDate.getFullYear();
                newToDate = new Date(selectedDate.getFullYear(), (selectedDate.getMonth() + 1), 0).getDate() + "-" + (selectedDate.getMonth() + 1) + "-" + selectedDate.getFullYear();
            }

            $("#StartDate").val(newFromDate).change();
            $('#EndDate').val(newToDate).change();

            if ('@ViewBag.SoldByParty' != null && '@ViewBag.SoldByParty' == 'Current') {
                $("#PartyName").data('ui-autocomplete')._trigger('select', 'autocompleteselect', { item: { label: '@CurrentPartyName' } });
            }
            else {
                $("#IsParty").iCheck('check');
            }

            if ('@ViewBag.BuyerParty' != null && '@ViewBag.BuyerParty' == 'Current') {
                CustomerId = '@CurrentPartyCode';
            }

            if ('@ViewBag.DirectViewFranchise' != null && '@ViewBag.DirectViewFranchise' == 1) {
                $("#FType").val("D");
            }
            else if ('@ViewBag.DirectViewAssociate' != null && '@ViewBag.DirectViewAssociate' == 1) {
                $("#FType").val("M");
            }

            $("#btnShowReport").click();
        }

    });

    function SetSpecificCode(type, label) {

        if (type == "Party") {
            for (var i = 0; i < FullPartyList.length; i++) {
                if (FullPartyList[i].PartyName == label) {
                    $("#PartyCode").val(FullPartyList[i].PartyCode);
                    break;
                }
            }
        }
    }

    function GetAllParty() {
        $.ajax({
            url: '/Report/GetAllPartyListForReports',
            dataType: 'JSON',
            method: 'GET',
            async: false,
            success: function (data) {
                console.log("data:", data);
                //response(data);
                FullPartyList = data;
                PartyList = [];
                if (data != null) {
                    var i = 0;
                    for (i = 0; i < data.length; i++) {
                        //console.log("data[i]", data[i]);
                        PartyList.push(data[i].PartyName);
                    }
                }
            },
            error: function (error) {
                console.log(error);
            }
        });
    }

    function toDate(dateStr) {
        var parts = dateStr.split("-");
        return new Date(parts[2], parts[1] - 1, parts[0]);
    }

    function OpenDialog(dialogId, Message, isConfirmation) {
        $("#" + dialogId).empty();
        $("#" + dialogId).append('<p>' + Message + '</p>');
        if (isConfirmation == "true") {
            $("#" + dialogId).dialog({
                modal: true,
                buttons: [{
                    text: "Yes",
                    id: "btnYes" + dialogId,
                    click: function () {
                        //var isOpen = $("#dialog").dialog("isOpen");
                        //if (isOpen == true) {
                        //    okCallBack();
                        //}
                        IsYes = true;
                        $("#" + dialogId).dialog("close");


                    }
                },
                {
                    text: "No",
                    id: "btnNo" + dialogId,
                    click: function () {
                        //var isOpen = $("#dialog").dialog("isOpen");
                        //if (isOpen == true) {
                        //    okCallBack();
                        //}
                        IsYes = false;
                        $("#" + dialogId).dialog("close");
                    }
                }
                ]
            });
            $(".ui-dialog-titlebar-close").empty();
            $(".ui-dialog-titlebar-close").append('<i class="fa fa-close"></i>');
        }
        else {


            $("#" + dialogId).dialog({
                modal: true,
                buttons: [{
                    text: "OK",
                    id: "btn" + dialogId,
                    click: function () {
                        //var isOpen = $("#dialog").dialog("isOpen");
                        //if (isOpen == true) {
                        //    okCallBack();
                        //}

                        $("#" + dialogId).dialog("close");


                    }
                }]
            });
            $(".ui-dialog-titlebar-close").empty();
            $(".ui-dialog-titlebar-close").append('<i class="fa fa-close"></i>');
        }

    }
    function fillGrid() {
        console.log("BillWiseGrid", BillWiseGrid);

        // BillWiseGrid = BillWiseGrid.splice(1);

        $("#noRecord").hide();
        //console.log("ProductGrid", ProductGrid);
        if (grid != null) {
            grid.destroy();
            $('#grid').empty();

        }
        var showmobile = true;
        if ('@objCon.CompID' == "1007")
        {
            showmobile = false;
        }

        grid = $('#grid').grid({
            dataSource: BillWiseGrid,
            uiLibrary: 'bootstrap',
            headerFilter: true,
            columns: [
                { field: 'SNo', title: 'S.No.', width: 80, sortable: true, hidden: false, filterable: false },
                 { field: 'BillNo', title: 'Bill No', width: 100, sortable: true, hidden: false, filterable: true, tmpl: '<a target="_blank" style="text-decoration:underline;color:blue" href={InvoicePath}>{BillNo}</a>', align: 'center' },
                  { field: 'BillDate', title: 'Bill Date', width: 100, sortable: true, hidden: false, filterable: true },
                   { field: 'PartyCode', title: 'Party Code', width: 90, sortable: true, hidden: false, filterable: true },
                    { field: 'PartyName', title: 'Party Name', width: 150, sortable: true, hidden: false, filterable: true },
                    { field: 'Code', title: 'Cust. Code', width: 100, sortable: true, hidden: false, filterable: true },
                    { field: 'Name', title: 'Cust. Name', width: 150, sortable: true, hidden: false, filterable: true },
                    { field: 'Mobile', title: 'Mobile No', width: 150, sortable: true, hidden: showmobile, filterable: true },
                    { field: 'BVValue', title: BVCaption, width: 80, sortable: true, hidden: false, filterable: true },
                    { field: 'Amount', title: 'Amount', width: 80, sortable: true, hidden: false, filterable: true },
                    //{ field: 'TaxAmount', title: 'Tax Amount', sortable: true, hidden: false, filterable: true },
                    { field: 'IGSTAmount', width: 80, title: 'IGST/Tax Amt.', sortable: true, hidden: false, filterable: true },
                    { field: 'CGSTAmount', width: 80, title: 'CGST Amt.', sortable: true, hidden: false, filterable: true },
                    { field: 'SGSTAmount', width: 80, title: 'SGST Amt.', sortable: true, hidden: false, filterable: true },
                    { field: 'NetAmount', width: 80, title: 'Net Amount', sortable: true, hidden: false, filterable: true },
                      { field: 'OfferName', width: 80, title: 'Offer Name', sortable: true, hidden: false, filterable: true },
            ],
            pager: { limit: 20, sizes: [15, 20, 35, 50, 65, 80, 95, 100] }
        });


    }

    //function GetSalesDetails() {


    //}
</script>
<div class="row">
    <div class="page-title">
        <div class="title_left">
            <h3>Sales Report</h3>
        </div>
        <div class="title_right">
            <div class="col-md-5 col-sm-5 col-xs-12 form-group pull-right top_search">

            </div>
        </div>
    </div>

    <div class="clearfix"></div>

    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="x_panel">
                <div class="x_title">
                    <h2>Bill Wise</h2>
                    <ul class="nav navbar-right panel_toolbox">
                        <li>
                            <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                        </li>
                    </ul>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content">
                    <br />
                    <form id="BillWiseSalesForm" method="post" name="BillWiseSalesForm" onsubmit="false" data-parsley-validate class="validateForm form-horizontal form-label-left">                      
                        @Html.HiddenFor(m => m.PartyCode, new { id = "PartyCode", name = "PartyCode" })
                        @Html.HiddenFor(m => m.InvoiceType, new { id = "hiddenInvoiceType", name = "hiddenInvoiceType" })                      
                        <div class="col-lg-12">
                            <div class="col-lg-8">
                                <div class="col-lg-6">
                                    <div class="form-group">
                                        <label class="control-label col-lg-6 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                            From Date @*<span class="required">*</span>*@
                                        </label>
                                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;">

                                            @Html.TextBoxFor(m => m.StartDate, new { name = "StartDate", id = "StartDate", tabindex = "1", @class = "form-control col-md-7 col-xs-12" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="form-group">
                                        <label class="control-label col-lg-6 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                            To Date @*<span class="required">*</span>*@
                                        </label>
                                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;">

                                            @Html.TextBoxFor(m => m.EndDate, new { name = "EndDate", id = "EndDate", tabindex = "2", @class = "form-control col-md-7 col-xs-12" })
                                        </div>
                                    </div>
                                </div>
                                </div>
                            <div class="col-lg-4">
                                <div class="form-group">
                                    <div id="IsProductDiv">
                                        <label>
                                            <input type="checkbox" id="IsDateFilter" name="IsDateFilter" class="flat" tabindex="3" />
                                        </label>
                                    </div>
                                </div>
                            </div>
                            </div>
                        <div class="col-lg-12">
                            <div class="col-lg-8">
                                <div class="form-group">
                                    <label class="control-label col-lg-3 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                        CustomerId No @*<span class="required">*</span>*@
                                    </label>
                                    <div class="col-lg-9 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;">

                                        @Html.TextBoxFor(m => m.CustCode, new { name = "CustCode", id = "CustCode", tabindex = "4", @class = "form-control col-md-7 col-xs-12" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="form-group">
                                    <div id="IsProductDiv">
                                        <label>
                                            <input type="checkbox" id="IsCustomerFilter" name="IsCustomerFilter" class="flat" tabindex="5" />
 </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        @if (IsSoldByHo)
                        {
                            <div class="col-lg-12">
                                <div class="col-lg-8">
                                    <div class="form-group">
                                        <label class="control-label col-lg-3 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                            Enter Party
                                        </label>
                                        <div class="col-lg-9 col-md-
                                              6 col-sm-6 col-xs-12" style="padding-left: 0.5%;">

                                            @Html.TextBoxFor(m => m.PartyName, new { name = "PartyName", id = "PartyName", tabindex = "5", @class = "form-control col-md-7 col-xs-12" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="form-group">
                                        <div id="IsPartyDiv">
                                            <label>
                                                <input type="checkbox" id="IsParty" name="IsParty" class="flat" tabindex="6" />
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        <div class="col-lg-12">
                           
                            <div class="form-group">
                                <div class="col-lg-12" >
                                    <div class="col-lg-8">
                                        <label class="control-label col-lg-3 col-md-3 col-sm-3 col-xs-12" for="category-name" style="padding-left:0px;padding-right:0px">
    Invoice Type
</label>
<div class="col-lg-3 col-md-3 col-sm-3 col-xs-12" style="padding-left: 0;">

    @Html.DropDownListFor(m => m.InvoiceType, ViewBag.InvoiceTypes as IEnumerable<SelectListItem>, new { name = "InvoiceType", id = "InvoiceType", tabindex = "5", @class = "form-control col-md-7 col-xs-12" })
</div>
                                        <div class="col-lg-3 col-md-3 col-sm-3">

                                            @*@Html.DropDownListFor(m => m.OfferUID, new SelectList(new List<SelectListItem>{
                                           new SelectListItem { Text="--All Bills--",Value="99"},
                                           new SelectListItem { Text="Offer Billing",Value="1"},
                                           new SelectListItem { Text="Without Offer",Value="0"} }, "Value", "Text"), new { @class = "form-control", @id = "OfferUID" })*@
                                            @Html.DropDownListFor(m => m.OfferUID, ViewBag.Offers as IEnumerable<SelectListItem>, new { name = "OfferUID", id = "OfferUID",  @class = "form-control col-md-7 col-xs-12" })

                                        </div> <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12" style="padding-left: 0.5%;">

                                                @Html.DropDownListFor(m => m.FType, new SelectList(new List<SelectListItem>{
                                           new SelectListItem { Text="--Party Type--",Value="A"},
                                           new SelectListItem { Text="Associate",Value="M"},
                                           new SelectListItem { Text="Franchise",Value="D"},
                                           new SelectListItem { Text = "General Customer", Value = "W" } }, "Value", "Text"), new { @class = "form-control", @id = "FType" })
                                            </div>
                                        </div>
                                    <div class="col-lg-4">
                                        <div class="form-group">
                                            <input type="button" id="btnShowReport" name="btnShowReport" value="Show Report" />
                                            <img src="~/images/ExcelImage.jpg" id="btnExport" style="margin-right: 60%;height: 25px;cursor:pointer;float:right" />
                                        </div>
                                    </div>
                                </div>

                               <div class="form-group">
                                   @* <div class="col-lg-12">
        <div class="col-lg-8">
            <label class="control-label col-lg-3 col-md-3 col-sm-3 col-xs-12" for="category-name" style="padding-left:0px;padding-right:0px">
              Select Offer
            </label>
            <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12" style="padding-left: 0;">
                @Html.DropDownListFor(m => m.OfferUID, ViewBag.Offers as IEnumerable<SelectListItem>, new { name = "Offers", id = "Offers", tabindex = "5", @class = "form-control col-md-7 col-xs-12" })
            </div>
        </div>
    </div>*@
            <br /><br /><center><div class="loader" style="display:none"></div></center>
            <br /> <div style="width:100%">
                <div style="float:right;">
                    Total @BVCaption: <label id="lblTotalBV">
                    </label> &nbsp;&nbsp; &nbsp;&nbsp;
                    Amount: <label id="lblTotalAmt"></label> &nbsp;&nbsp; &nbsp;&nbsp;
                    Net Payable: <label id="lblNetAmt"></label> &nbsp;&nbsp;
                </div>
            </div>
            <table class="table bootstrap-datatable" id="grid"></table>
            <center><span style="display:none" id="noRecord">No Records Found</span></center>


        </div>
                                @*<div class="col-lg-12">
                                    <table class="table bootstrap-datatable" id="grid"></table>
                                    <center><span style="display:none" id="noRecord">No Records Found</span></center>
                                </div>*@  
                                    </div>

                                    <table id="gridExport" style="display:none"></table>

</form>
                </div>

            </div>
        </div>
    </div>
    <div id="dialogMessage" title="Message">

    </div>

</div>

