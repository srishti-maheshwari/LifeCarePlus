@model InventoryManagement.Entity.Common.SalesReport
@using InventoryManagement.Common
@using InventoryManagement.Entity.Common
@{
    ViewBag.Title = "ProductSalesReport";
    Layout = "~/Views/Shared/_Layout.cshtml";
    bool IsSoldByHo = (Session["LoginUser"] as User).IsSoldByHo;
    string CurrentPartyCode = (Session["LoginUser"] as User).PartyCode;
    string CurrentPartyName = (Session["LoginUser"] as User).PartyName;
    string CVCaption = Session["CVCaption"].ToString();
    string BVCaption = Session["BVCaption"].ToString();
    string PVCaption = Session["PVCaption"].ToString();
    string RPCaption = Session["RPCaption"].ToString();

}
<style>
    .ui-widget-header {
        margin-top: -1% !important;
        width: 102% !important;
        margin-left: -1% !important;
    }
     .gj-grid-wrapper {
        min-width: 100% !important;
        overflow-x: scroll !important;
    }
    .ui-dialog-titlebar-close {
        margin-right: 1% !important;
    }

    .ui-widget-content {
        background: white !important;
        border-radius: 15px !important;
        -webkit-border-radius: 4px !important;
    }
    /*.ui-widget-header .ui-icon {
        background-color: black!important;
    }*/
    ui-autocomplete-input {
        z-index: 100;
    }

    .input-readonly {
        background-color: #EBEBE4;
    }
</style>
<script type="text/javascript">
    var grid, dialog;
    var IsYes = false;
    var ProductWiseGrid = [{}];
    var ProductList = [];
    var FullProductList;
    var CategoryList = [];
    var FullCategoryList;
    var SalesType = "ProductWise";
    var IsCategory = false;
    var IsProduct = false;
    var IsDateFilter = false;
    var FromDate="", ToDate="";
    var ProductCode = "0", CategoryCode = "0";
    var PreviouslySelectedFromDate = "";
    var PreviouslySelectedToDate = "";
    var PreviouslySelectedFromPickerDate = "";
    var PreviouslySelectedToPickerDate = "";
    var IsParty = false;
    var PartyList = [];
    var FullPartyList;
    $(document).ready(function () {
        var IsAdministrator='@IsSoldByHo';
        if (IsAdministrator=="True") {
            GetAllParty();
        }
        else{
            @*$("#PartyName").val('@CurrentPartyName');
            $("#PartyName").prop("readonly", "readonly");*@
            $("#PartyCode").val('@CurrentPartyCode');
        }
        $(".preloader").hide();
        GetAllCategory();
        GetAllProducts(0);
        $("#ProductName").autocomplete({
            source: function (request, response) {
                var results = $.ui.autocomplete.filter(ProductList, request.term);

                response(results.slice(0, 50));
                //response(results);
                //$('html').getNiceScroll().resize();
                //$('#sidebar').getNiceScroll().resize();
                //$('.scroll-panel').getNiceScroll().resize();
                //response(ItemList);
            },
            minLength: 1,
            scroll: true,
            select: function (event, ui) {
                //$("#txDestination").val(ui.item.label);
                //cityID = ui.item.id;
                console.log("ui.item", ui.item.label);
                $("#ProductName").val(ui.item.label);
                SetSpecificCode("Product", ui.item.label);
               return false;
            },

        }).focus(function () {
            $(this).autocomplete("search", "");
        });

        $("#CategoryName").autocomplete({
            source: function (request, response) {
                var results = $.ui.autocomplete.filter(CategoryList, request.term);

                response(results.slice(0, 50));
               
            },
            minLength: 1,
            scroll: true,
            select: function (event, ui) {
               
                console.log("ui.item", ui.item.label);
                $("#CategoryName").val(ui.item.label);

                SetSpecificCode("Category", ui.item.label);

                return false;
            },

        }).focus(function () {
            $(this).autocomplete("search", "");
        });

        $('#IsCategory').on('ifChecked', function () {
            //console.log("checked");
            IsCategory = true;
            CategoryCode = "";
            $("#CategoryName").val("All");
            $("#CategoryName").prop("readonly", "readonly");
            $("#CategoryCode").val(0);
            //GetAllProducts(0);
            $('#IsProduct').trigger('ifChecked');
            var CheckBoxEle = $("#IsProductDiv").find('.icheckbox_flat-green');
            $(CheckBoxEle).addClass("checked");

          //  var ProductCode = $("#ProductCode").val();
          //  var CategoryCode = $("#CategoryCode").val();
           // GetSalesDetails($("#StartDate").val(), $("#EndDate").val(), ProductCode, CategoryCode, '@CurrentPartyCode', "S");

        });
        $('#IsProduct').on('ifChecked', function () {
            //console.log("checked");
            IsProduct = true;
            ProductCode = "";
            $("#ProductName").val("All");
            $("#ProductName").prop("readonly", "readonly");
            $("#ProductCode").val(0);

          //  var ProductCode = $("#ProductCode").val();
          //  var CategoryCode = $("#CategoryCode").val();
           // GetSalesDetails($("#StartDate").val(), $("#EndDate").val(), ProductCode, CategoryCode, '@CurrentPartyCode', "S");

            //GetAllProducts(0);

        });

        $('#IsProduct').on('ifUnchecked', function () {
            //console.log("checked");
            IsProduct = false;
            ProductCode = "";
            $("#ProductName").val("");
            $("#ProductName").prop("readonly", "");
            $("#ProductCode").val("");
        });
        $('#IsCategory').on('ifUnchecked', function () {
            //console.log("checked");
            IsCategory = false;
            CategoryCode = "";
            $("#CategoryName").val("");
            $("#CategoryName").prop("readonly", "");
            $("#CategoryCode").val("");
            GetAllCategory();
        });

        $('#IsDateFilter').on('ifChecked', function () {
            //console.log("checked");
            IsDateFilter = true;
            FromDate = "";
            ToDate = "";
            $("#StartDate").val("All");
            $("#StartDate").prop("readonly", "readonly");
             $("#EndDate").val("All");
             $("#EndDate").prop("readonly", "readonly");
             //var ProductCode = $("#ProductCode").val();
            // var CategoryCode = $("#CategoryCode").val();
           // GetSalesDetails($("#StartDate").val(), $("#EndDate").val(), ProductCode, CategoryCode, '@CurrentPartyCode', "S");

        });
        $('#IsDateFilter').on('ifUnchecked', function () {
            //console.log("checked");
            FromDate = "";
            ToDate = "";
            IsDateFilter = false;
            $("#StartDate").val("");
            $("#StartDate").prop("readonly", "");
            $("#EndDate").val("");
            $("#EndDate").prop("readonly", "");
        });

        $("#StartDate").datetimepicker({


            format: 'DD-MMM-YYYY'
            ,
            // todayHighlight:true,
            widgetPositioning: {
                horizontal: 'auto',
                vertical: 'bottom'
            }

        });
        $("#EndDate").datetimepicker({


            format: 'DD-MMM-YYYY'
            ,
            // todayHighlight:true,
            widgetPositioning: {
                horizontal: 'auto',
                vertical: 'bottom'
            }

        });

        $("#btnExport").on('click', function () {
           var UserTypeStr = "ProductWiseSalesReport";
            var SummType = $("#SummType").val();
            
            var tableString = "<thead><tr>";
            tableString += "<th>S.No.</th>";
            if (SummType == "ProductWiseDetail")
            {
                tableString += "<th>Bill No.</th>";
                tableString += "<th>Bill Date</th>";
                tableString += "<th>Buyer Code</th>";
                tableString += "<th>Buyer Name</th>";
            }
            tableString += "<th>Sold By</th>";
            tableString += "<th>Sold By Name</th>";
            tableString += "<th>Party Type</th>";
            tableString += "<th>Prod. Code</th>";
            tableString += "<th>Product Name</th>";
            tableString += "<th>Qty</th>";
            tableString += "<th>Rate</th>";
            if (SummType == "ProductWiseDetail") {
                tableString += "<th>" + "@PVCaption" + "</th>";
            }
            tableString += "<th>Disc. Amt.</th>";
            tableString += "<th>Tax Per.</th>";
            tableString += "<th>Tax Amt.</th>";
            tableString += "<th>Basic Amt.</th>";
            tableString += "<th>Total Amt.</th>";
            tableString += "</tr></thead><tbody>";
            for (var i = 0; i < ProductWiseGrid.length; i++) {
                tableString += "<tr>";
                tableString += "<td>" + ProductWiseGrid[i].SNo + "</td>";
                if (SummType == "ProductWiseDetail") {
                    tableString += "<td>" + ProductWiseGrid[i].BillNo + "</td>";
                    tableString += "<td>" + ProductWiseGrid[i].BillDate + "</td>";
                    tableString += "<td>" + ProductWiseGrid[i].CustCode + "</td>";
                    tableString += "<td>" + ProductWiseGrid[i].CustName + "</td>";
                }
                tableString += "<td>" + ProductWiseGrid[i].PartyCode + "</td>";
                tableString += "<td>" + ProductWiseGrid[i].PartyName + "</td>";
                tableString += "<td>" + ProductWiseGrid[i].FType + "</td>";
                tableString += "<td class='formatText'>" + ProductWiseGrid[i].ProdCode + "</td>";
                tableString += "<td>" + ProductWiseGrid[i].ProductName + "</td>";
                tableString += "<td>" + ProductWiseGrid[i].Qty + "</td>";
                tableString += "<td>" + ProductWiseGrid[i].Rate + "</td>";
                if (SummType == "ProductWiseDetail") {
                   tableString += "<td>" + ProductWiseGrid[i].PV + "</td>";
                }
                tableString += "<td>" + ProductWiseGrid[i].DiscAmt + "</td>";
                tableString += "<td>" + ProductWiseGrid[i].TaxPer + "</td>";
                tableString += "<td>" + ProductWiseGrid[i].TaxAmt + "</td>";
                tableString += "<td>" + ProductWiseGrid[i].BasicAmt + "</td>";
                tableString += "<td>" + ProductWiseGrid[i].TotalAmt + "</td>";
                tableString += "</tr>";
            }


            tableString += "</tbody>";
            $("#gridExport").empty();
            $("#gridExport").append(tableString);
            tableToExcel('gridExport', UserTypeStr + "_Export");
        });

        $("#btnShowReport").on('click', function () {
            debugger;
            $(".preloader").show();
            var PartyCode = $("#PartyCode").val();
            var FType = $("#FType").val();
            var DateError = false;
            FromDate = $("#StartDate").val();
            ToDate = $("#EndDate").val();
            if (FromDate != "" && FromDate != null && ToDate != null && ToDate != null) {
               
                var d1 = toDate(FromDate);
                var d2 = toDate(ToDate);
               
                if (d1 > d2) {

                    DateError = true;
                    $(".preloader").hide();
                    OpenDialog("dialogMessage", "From Date should be less than To Date!", "false");
                    //$("#StartDate").focus();
                }
                else {
                    DateError = false;

                }
            }
            else {
                DateError = false;
                if (DateError == false) {
                    if (IsDateFilter == false) 
                    {
                        FromDate = $("#StartDate").val();
                        ToDate = $("#EndDate").val();
                        //if (FromDate == "" || FromDate == null) {
                        //    FromDate = PreviouslySelectedFromDate;
                        //}
                        //if (ToDate == "" || ToDate == null) {
                        //    ToDate = PreviouslySelectedToDate;
                        //}
                    }
                }
                    if (FromDate == "" || FromDate == null) {
                        //OpenDialog("dialogMessage", "Please enter from date!", "false");
                        FromDate = "All";
                    }
                    console.log("ToDate", ToDate);
                    if (ToDate == "" || ToDate == null) {
                        console.log("ToDate in", ToDate);
                        ToDate = "All";
                        // OpenDialog("dialogMessage", "Please enter to date!", "false");
                    }

            }
            if (ProductCode == "" || ProductCode == null) {
                    ProductCode = 0;
                    
                }
                 if (CategoryCode == "" || CategoryCode == null) {
                    CategoryCode = 0;
                   
                }
                 if (DateError == false) {

                     var InvoiceTypeVal = "";
                     var SummType = $("#SummType").val();
                     $.ajax({
                         url: '@Url.Action("GetSalesReport", "Report")',
                         type: 'POST',
                         data: { "FromDate": FromDate, "ToDate": ToDate, "CustomerId": "", "ProductCode": ProductCode, "CategoryCode": CategoryCode, "PartyCode": PartyCode, "BType": "S", "SalesType": SummType, "InvoiceType": InvoiceTypeVal, "FType": FType, "OfferUID": 99 },
                         async: false,
                         dataType: "json",
                         success: function (objResult) {
                             ProductWiseGrid = [{}];
                             if (objResult.length > 0) {
                                 var totalAmt = 0;
                                 ProductWiseGrid = ProductWiseGrid.splice(1);
                                 for (var i = 0; i < objResult.length; i++) {
                                     var Tax = parseFloat(objResult[i].TaxPer);//+ parseFloat(objResult[i].CGST) + parseFloat(objResult[i].SGST);
                                     var TaxAmt = parseFloat(objResult[i].TaxAmount) + parseFloat(objResult[i].CGSTAmount) + parseFloat(objResult[i].SGSTAmount);
                                     var TotAmt = parseFloat(objResult[i].NetAmount) + TaxAmt;
                                     totalAmt = parseFloat(totalAmt) + TotAmt;
                                     var InvoicePath = '@Url.Action("InvoicePrint", "Transaction", new { Pm = "-1" })';
                                     var encodedparameters = objResult[i].BillNo;
                                     var EncryptedB64Url = window.btoa(encodedparameters);
                                     InvoicePath = InvoicePath.replace("-1", EncryptedB64Url);
                                     var PartyType="Franchise";
                                     if (objResult[i].FType=="M"){
                                         PartyType="Member";}
                                     if (objResult[i].FType=="W"){
                                         PartyType = "Customer";
                                     }
                                     ProductWiseGrid.push({ "SNo": i + 1, "PartyCode": objResult[i].PartyCode, "PartyName": objResult[i].PartyName, "ProdCode": objResult[i].ProdCode, "ProductName": objResult[i].ProductName, "Qty": objResult[i].Qty, "Rate": objResult[i].Rate, "DiscPer": objResult[i].DiscPer, "DiscAmt": objResult[i].DiscAmt, "TaxPer": Tax, "TaxAmt": TaxAmt, "BasicAmt": objResult[i].BasicAmt, "TotalAmt": TotAmt, "FType": PartyType, "InvoicePath": InvoicePath, "BillNo": objResult[i].BillNo, "BillDate": objResult[i].StrBillDate, "CustCode": objResult[i].CustCode, "CustName": objResult[i].CustName, "PV": objResult[i].PV });//"InvoicePath": InvoicePath,
                                 }
                                 $("#lblTotalAmt").text(totalAmt);
                             }

                             fillGrid();
                             //FromDate = $("#StartDate").val();
                             //ToDate = $("#EndDate").val();
                             $(".preloader").hide();
                         },
                         error: function (xhr, data) {
                             //  return false;
                             console.log(xhr);
                             console.log("Error:", data);
                         }
                     });
                 }
        });


        $("#PartyName").autocomplete({
            source: function (request, response) {
                var results = $.ui.autocomplete.filter(PartyList, request.term);
                response(results.slice(0, 50));
               
            },
            minLength: 1,
            scroll: true,
            select: function (event, ui) {
                //$("#txDestination").val(ui.item.label);
                //cityID = ui.item.id;
                console.log("ui.item", ui.item.label);
                $("#PartyName").val(ui.item.label);
                SetSpecificCode("Party", ui.item.label);
                return false;
            },

        }).focus(function () {
            $(this).autocomplete("search", "");
        });

        $('#IsParty').on('ifChecked', function () {
            //console.log("checked");
            IsParty = true;
            //$("#PartyName").val("All");
            //$("#PartyName").prop("readonly", "readonly");
            //$("#PartyCode").val(0);
            $("#PartyName").val('All');
            $("#PartyName").prop("readonly", "readonly");
            $("#PartyCode").val('0');
        });

        $('#IsParty').on('ifUnchecked', function () {
            //console.log("checked");
            IsParty = false;
            //$("#PartyName").val("");
            //$("#PartyName").prop("readonly", "");
            //$("#PartyCode").val("");
            $("#PartyName").val('');
            $("#PartyName").prop("readonly", "");
            $("#PartyCode").val('');
        });

    });

    function SetSpecificCode(type, label) {

        if (type == "Party") {
            for (var i = 0; i < FullPartyList.length; i++) {
                if (FullPartyList[i].PartyName == label) {
                    $("#PartyCode").val(FullPartyList[i].PartyCode);
                    break;
                }
            }
        }
    }

    function GetAllParty() {
        $.ajax({
            url: '/Report/GetAllPartyListForReports',
            dataType: 'JSON',
            method: 'GET',
            //data: { 'LedgerName': '' },
            success: function (data) {
                console.log("data:", data);
                //response(data);
                FullPartyList = data;
                PartyList = [];
                if (data != null) {
                    var i = 0;
                    for (i = 0; i < data.length; i++) {
                        //console.log("data[i]", data[i]);
                        PartyList.push(data[i].PartyName);
                    }
                }
            },
            error: function (error) {
                console.log(error);
            }
        });
    }
    function toDate(dateStr) {
        var parts = dateStr.split("-");
        return new Date(parts[2], parts[1] - 1, parts[0]);
    }
    function OpenDialog(dialogId, Message, isConfirmation) {
        $("#" + dialogId).empty();
        $("#" + dialogId).append('<p>' + Message + '</p>');
        if (isConfirmation == "true") {
            $("#" + dialogId).dialog({
                modal: true,
                buttons: [{
                    text: "Yes",
                    id: "btnYes" + dialogId,
                    click: function () {
                        //var isOpen = $("#dialog").dialog("isOpen");
                        //if (isOpen == true) {
                        //    okCallBack();
                        //}
                        IsYes = true;
                        $("#" + dialogId).dialog("close");


                    }
                },
                {
                    text: "No",
                    id: "btnNo" + dialogId,
                    click: function () {
                        //var isOpen = $("#dialog").dialog("isOpen");
                        //if (isOpen == true) {
                        //    okCallBack();
                        //}
                        IsYes = false;
                        $("#" + dialogId).dialog("close");
                    }
                }
                ]
            });
            $(".ui-dialog-titlebar-close").empty();
            $(".ui-dialog-titlebar-close").append('<i class="fa fa-close"></i>');
        }
        else {


            $("#" + dialogId).dialog({
                modal: true,
                buttons: [{
                    text: "OK",
                    id: "btn" + dialogId,
                    click: function () {
                        //var isOpen = $("#dialog").dialog("isOpen");
                        //if (isOpen == true) {
                        //    okCallBack();
                        //}

                        $("#" + dialogId).dialog("close");


                    }
                }]
            });
            $(".ui-dialog-titlebar-close").empty();
            $(".ui-dialog-titlebar-close").append('<i class="fa fa-close"></i>');
        }

    }
    function GetAllProducts(catId) {
        $.ajax({
            url: '/Report/GetAllProduct',
            dataType: "json",
            method: 'POST',
            async: false,
            data: { 'CategoryCode': catId },
            success: function (data) {
                console.log("data:", data);
                //response(data);
                FullProductList = data;
                ProductList = [];
                if (data != null) {
                    var i = 0;
                    for (i = 0; i < data.length; i++) {
                        //console.log("data[i]", data[i]);
                        ProductList.push(data[i].ProductName);
                    }
                }
            },
            error: function (xhr, status, error) {
                console.log("xhr.responseText:", xhr.responseText);

            }
        });
    }

    function ShowProductDetail(e) {
        debugger;
        console.log("Record", e.data.record);
        GetBillProduct(e.data.record.BillNo, e.data.record.ProdCode);//e.data.record.UID
        OpenProductDetails();
    }
    function OpenProductDetails() {
        $("#dialogProdDetail").dialog({
            modal: true,
            width: "55%",
            buttons: [{
                text: "OK",
                id: "btndialogProd",
                click: function () {
                    $("#dialogProdDetail").dialog("close");
                }
            }]
        });
        $(".ui-dialog-titlebar-close").empty();
        $(".ui-dialog-titlebar-close").append('<i class="fa fa-close"></i>');
    }


    function GetBillProduct(BillNoToGet, prodid) {
        $.ajax({
            url: '@Url.Action("GetDetailProductWiseBill", "Report")',
            type: 'POST',
            data: { "BillNoToGet": BillNoToGet, "prodid": prodid },
            async: false,
            dataType: "json",
            success: function (objResult) {
                if (objResult != null) {
                    $("#BillNoToGet").html(BillNoToGet);
                    $("#BillProductDetails").empty();
                    var tableStr;
                    for (var i = 0; i < objResult.length; i++) {
                        var Amount = (parseFloat(objResult[i].Amount) + parseFloat(objResult[i].CGSTAmount) + parseFloat(objResult[i].SGSTAmount) + parseFloat(objResult[i].TaxAmt)).toFixed(2);
                        tableStr = tableStr + "<tr><td>" + parseFloat(i + 1) + "</td><td>" + objResult[i].ProdCode + "</td><td>" + objResult[i].ProductName + "</td><td>" + objResult[i].Qty + "</td><td>" + objResult[i].Rate + "</td><td>" + Amount + "</td><td>" + objResult[i].BillDate + "</td><td>" + objResult[i].PartyName + "</td><td>" + objResult[i].PartyCode + "</td><td>" + objResult[i].NetAmount + "</td></tr>";
                    }
                    $("#BillProductDetails").html(tableStr);
                }
            }
        });
    }

    function fillGrid() {
        var SummType = $("#SummType").val();
        $("#noRecord").hide();
        
        if (grid != null) {
            grid.destroy();
            $('#grid').empty();

        }
        if (SummType == "ProductWiseDetail") {
            console.log("Detail Grid");
            grid = $('#grid').grid({
                dataSource: ProductWiseGrid,
                uiLibrary: 'bootstrap',
                headerFilter: true,
                columns: [
                    { field: 'SNo', title: 'S.No.', width: 80, sortable: true, hidden: false, filterable: false },
                    //{ field: 'BillNo', title: 'Bill No', width: 100, sortable: true, hidden: false, filterable: true, tmpl: '<span" style="text-decoration:underline;color:blue" >{BillNo}</span>', events: { 'click': ShowProductDetail }, align: 'center' },
                     { field: 'BillNo', title: 'Bill No', width: 100, sortable: true, hidden: false, filterable: true, tmpl: '<a target="_blank" style="text-decoration:underline;color:blue" href={InvoicePath}>{BillNo}</a>', align: 'center' },
                    //{field: 'BillNo', title: 'Bill No.', width: 100, sortable: true, hidden: false, filterable: true },
            { field: 'BillDate', title: 'Bill Date', width: 150, sortable: true, hidden: false, filterable: true },
                     { field: 'PartyCode', title: 'Sold by', width: 100, sortable: true, hidden: false, filterable: true },
                      { field: 'PartyName', title: 'Name', width: 150, sortable: true, hidden: false, filterable: true },
                       { field: 'FType', title: 'Party Type', width: 100, sortable: true, hidden: false, filterable: true },

                        { field: 'CustCode', title: 'Buyer Code', width: 100, sortable: true, hidden: false, filterable: true },
                      { field: 'CustName', title: 'Buyer Name', width: 150, sortable: true, hidden: false, filterable: true },
                       { field: 'ProdCode', title: 'Prod Code', width: 100, sortable: true, hidden: false, filterable: true },
                        { field: 'ProductName', title: 'Product Name', width: 150, sortable: true, hidden: false, filterable: true },
                         { field: 'Qty', title: 'Qty', width: 80, sortable: true, hidden: false, filterable: true },
                          { field: 'Rate', title: 'Rate', width: 80, sortable: true, hidden: false, filterable: true },
                           { field: 'PV', title: '@PVCaption', width: 80, sortable: true, hidden: false, filterable: true },
                            { field: 'DiscAmt', title: 'Disc. Amt.', width: 80, sortable: true, hidden: false, filterable: true },
                             { field: 'TaxPer', title: 'Tax(%)', width: 80, sortable: true, hidden: false, filterable: true },
                             { field: 'TaxAmt', title: 'Tax Amt.', width: 80, sortable: true, hidden: false, filterable: true },
                              { field: 'BasicAmt', title: 'Basic Amt.', width: 80, sortable: true, hidden: false, filterable: true },
                              { field: 'TotalAmt', title: 'Total Amt.', width: 80, sortable: true, hidden: false, filterable: true },
                ],
                pager: { limit: 20, sizes: [15, 20, 35, 50, 65, 80, 95, 100] }
            });
        }
        else {
            console.log("Summary Grid");
            grid = $('#grid').grid({
                dataSource: ProductWiseGrid,
                uiLibrary: 'bootstrap',
                headerFilter: true,
                columns: [
                    { field: 'SNo', title: 'S.No.', width: 80, sortable: true, hidden: false, filterable: false },

                     { field: 'PartyCode', title: 'Sold by', width: 100, sortable: true, hidden: false, filterable: true },
                      { field: 'PartyName', title: 'Name', width: 150, sortable: true, hidden: false, filterable: true },
                       { field: 'FType', title: 'Party Type', width: 100, sortable: true, hidden: false, filterable: true },
                       { field: 'ProdCode', title: 'Prod Code', width: 100, sortable: true, hidden: false, filterable: true },
                        { field: 'ProductName', title: 'Product Name', width: 150, sortable: true, hidden: false, filterable: true },
                         { field: 'Qty', title: 'Qty', width: 80, sortable: true, hidden: false, filterable: true },
                          { field: 'Rate', title: 'Rate', width: 80, sortable: true, hidden: false, filterable: true },
                          // { field: 'DiscPer', title: 'Disc%', width: 80, sortable: true, hidden: false, filterable: true },
                            { field: 'DiscAmt', title: 'Disc. Amt.', width: 80, sortable: true, hidden: false, filterable: true },
                             { field: 'TaxPer', title: 'Tax(%)', width: 80, sortable: true, hidden: false, filterable: true },
                             { field: 'TaxAmt', title: 'Tax Amt.', width: 80, sortable: true, hidden: false, filterable: true },
                              { field: 'BasicAmt', title: 'Basic Amt.', width: 80, sortable: true, hidden: false, filterable: true },
                              { field: 'TotalAmt', title: 'Total Amt.', width: 80, sortable: true, hidden: false, filterable: true },
                ],
                pager: { limit: 20, sizes: [15, 20, 35, 50, 65, 80, 95, 100] }
            });
        }

    }

    function SetSpecificCode(type, label) {
        console.log("FullProductList", FullProductList);
        console.log("FullCategoryList", FullCategoryList);
        if (type == "Product") {
            for (var i = 0; i < FullProductList.length; i++) {
                if (FullProductList[i].ProductName == label) {
                    $("#ProductCode").val(parseFloat(FullProductList[i].ProductCodeStr));
                    ProductCode = parseFloat(FullProductList[i].ProductCodeStr);
                    break;
                }
            }
        }
        if (type == "Category") {
            for (var i = 0; i < FullCategoryList.length; i++) {
                if (FullCategoryList[i].CategoryName == label) {
                    $("#CategoryCode").val(FullCategoryList[i].CategoryId);
                    CategoryCode = FullCategoryList[i].CategoryId;
                    GetAllProducts(FullCategoryList[i].CategoryId);
                    break;
                }
            }
        }
        if (type == "Party") {
            for (var i = 0; i < FullPartyList.length; i++) {
                if (FullPartyList[i].PartyName == label) {
                    $("#PartyCode").val(FullPartyList[i].PartyCode);
                    break;
                }
            }
        }
        console.log("CategoryCode", CategoryCode);
        console.log("ProductCode", ProductCode);
    }
    
    function GetAllCategory() {
        $.ajax({
            url: '/Report/GetAllCategory',
            dataType: 'JSON',
            method: 'GET',
            async: false,
            //data: { 'LedgerName': '' },
            success: function (data) {
                console.log("data:", data);
                //response(data);
                FullCategoryList = data;
                CategoryList = [];
                if (data != null) {
                    var i = 0;
                    for (i = 0; i < data.length; i++) {
                        //console.log("data[i]", data[i]);
                        CategoryList.push(data[i].CategoryName);
                    }
                }
            },
            error: function (error) {
                console.log(error);
            }
        });
    }

    
</script>
<div class="row">
    <div class="page-title">
        <div class="title_left">
            <h3>Sales Report</h3>
        </div>
        <div class="title_right">
            <div class="col-md-5 col-sm-5 col-xs-12 form-group pull-right top_search">

            </div>
        </div>
    </div>

    <div class="clearfix"></div>

    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="x_panel">
                <div class="x_title">
                    <h2>Product Wise</h2>
                    <ul class="nav navbar-right panel_toolbox">
                        <li>
                            <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                        </li>

                    </ul>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content">
                    <br />
                    <form id="ProductWiseSalesForm" method="post" name="ProductWiseSalesForm" onsubmit="false" data-parsley-validate class="validateForm form-horizontal form-label-left">
                        @Html.HiddenFor(m => m.PartyCode, new { id = "PartyCode", name = "PartyCode" })


                        <div class="col-lg-12">
                            <div class="col-lg-8">
                                <div class="col-lg-6">
                                    <div class="form-group">
                                        <label class="control-label col-lg-6 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                            From Date @*<span class="required">*</span>*@
                                        </label>
                                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;">

                                            @Html.TextBoxFor(m => m.StartDate, new { name = "StartDate", id = "StartDate", tabindex = "1", @class = "form-control col-md-7 col-xs-12" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="form-group">
                                        <label class="control-label col-lg-6 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                            To Date @*<span class="required">*</span>*@
                                        </label>
                                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;">

                                            @Html.TextBoxFor(m => m.EndDate, new { name = "EndDate", id = "EndDate", tabindex = "2", @class = "form-control col-md-7 col-xs-12" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="form-group">
                                    <div id="IsDateDiv">
                                        <label>
                                            <input type="checkbox" id="IsDateFilter" name="IsDateFilter" class="flat" tabindex="3" />


                                        </label>

                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12">
                            <div class="col-lg-8">
                                <div class="form-group">
                                    <label class="control-label col-lg-3 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                        Category @*<span class="required">*</span>*@
                                    </label>
                                    <div class="col-lg-9 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;">

                                        @Html.TextBoxFor(m => m.Categoryname, new { name = "CategoryName", id = "CategoryName", tabindex = "4", @class = "form-control col-md-7 col-xs-12" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="form-group">
                                    <div id="IsCategoryDiv">
                                        <label>
                                            <input type="checkbox" id="IsCategory" name="IsCategory" class="flat" tabindex="5" />


                                        </label>

                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12">
                            <div class="col-lg-8">
                                <div class="form-group">
                                    <label class="control-label col-lg-3 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                        Product @*<span class="required">*</span>*@
                                    </label>
                                    <div class="col-lg-9 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;">

                                        @Html.TextBoxFor(m => m.ProductName, new { name = "ProductName", id = "ProductName", tabindex = "6", @class = "form-control col-md-7 col-xs-12" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="form-group">
                                    <div id="IsProductDiv">
                                        <label>
                                            <input type="checkbox" id="IsProduct" name="IsProduct" class="flat" tabindex="7" />


                                        </label>

                                    </div>
                                </div>
                            </div>
                        </div>
                        @if (IsSoldByHo)
                        {
                            <div class="col-lg-12">
                                <div class="col-lg-8">
                                    <div class="form-group">
                                        <label class="control-label col-lg-3 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                            Enter Party
                                        </label>
                                        <div class="col-lg-9 col-md-6 col-sm-6 col-xs-12" style="padding-left: 0.5%;">

                                            @Html.TextBoxFor(m => m.PartyName, new { name = "PartyName", id = "PartyName", tabindex = "5", @class = "form-control col-md-7 col-xs-12" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="form-group">
                                        <div id="IsPartyDiv">
                                            <label>
                                                <input type="checkbox" id="IsParty" name="IsParty" class="flat" tabindex="6" />


                                            </label>

                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        <div class="col-lg-12">
                            <div class="col-lg-8">
                                <div class="form-group">
                                    <label class="control-label col-lg-3 col-md-3 col-sm-3 col-xs-12" for="category-name">
                                        Product @*<span class="required">*</span>*@
                                    </label>
                                    <div class="col-lg-3 col-md-6 col-sm-6 col-xs-12" style="padding-left:0.5%">
                                        @Html.DropDownListFor(m => m.FType, new SelectList(new List<SelectListItem>{
                                           new SelectListItem { Text="--Party Type--",Value="A"},
                                           new SelectListItem { Text="Distributor",Value="M"},
                                           new SelectListItem { Text="Franchise",Value="D"},
                                           new SelectListItem { Text = "General Customer", Value = "W" } }, "Value", "Text"), new { @class = "form-control", @id = "FType" })
                                    </div>
                                    <div class="col-lg-4 col-md-6 col-sm-6 col-xs-12" style="padding-left:0.5%">
                                        @Html.DropDownListFor(m => m.InvoiceType, new SelectList(new List<SelectListItem>{
                                           new SelectListItem { Text="Summary",Value="ProductWiseSumm"},
                                           new SelectListItem { Text="Detail",Value="ProductWiseDetail"} }, "Value", "Text"), new { @class = "form-control", @id = "SummType" })
                                    </div>
                                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12" >
                                        <input type="button" id="btnShowReport" name="btnShowReport" value="Show Report"  />
                                    </div>
                            </div>

                              
                            </div>
                            <div class="col-lg-4">
                                <div class="form-group">

                                    <img src="~/images/ExcelImage.jpg" id="btnExport" style="margin-right: 6%;height: 25px;cursor:pointer;float:left" />

                                    <div class="col-lg-3">&nbsp;</div>
                                </div>
                                <br /><center><div class="loader" style="display:none"></div></center>
                                <br />
                                <div class="col-lg-12" style="text-align:right">
                                    Total Amount: <label id="lblTotalAmt"></label>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <table class="table bootstrap-datatable" id="grid"></table>
                                <center><span style="display:none" id="noRecord">No Records Found</span></center>
                            </div>  


                            </div>


                        <table id="gridExport" style="display:none"></table>
                    </form>
                </div>

            </div>
        </div>
    </div>
    <div id="dialogMessage" title="Message">

    </div>

   
    <div id="dialogProdDetail" title="ProductDetail" style="display:none;padding:0px;">
        <div class="col-lg-12" style="background-color:lightgrey;border:1px black solid;"><span style="width:100%;"><center>Bill No: <span id="BillNoToGet"></span></center></span></div>
        <div class="col-lg-12" style="height: 150px;overflow-y: auto;min-height: 150px;">

            <br />
            <table style="width:100%;" border="1">
                <thead>
                    <tr>
                        <th><span>S.No.</span></th>
                        <th><span>Prod.ID</span></th>
                        <th><span>Product Name</span></th>
                        <th><span>Qty</span></th>
                        <th><span>Rate</span></th>
                        <th><span>Amount</span></th>
                        <th><span>BillDate</span></th>
                        <th><span>PartyName</span></th>
                        <th><span>PartyCode</span></th>
                        <th><span>NetAmount</span></th>
                    </tr>
                </thead>
                <tbody id="BillProductDetails"></tbody>
            </table>
        </div>
    </div>

</div>
